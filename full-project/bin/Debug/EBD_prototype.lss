
bin\Debug\EBD_prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  000018c4  00001978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800208  00800208  00001a80  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000220  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000580  00000000  00000000  00001ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000249d  00000000  00000000  00002223  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001349  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019bf  00000000  00000000  00005a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  000073c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000671  00000000  00000000  000077a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089e  00000000  00000000  00007e19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a8 e0       	ldi	r26, 0x08	; 8
      78:	b2 e0       	ldi	r27, 0x02	; 2
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a6 31       	cpi	r26, 0x16	; 22
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	12 e0       	ldi	r17, 0x02	; 2
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e4 ec       	ldi	r30, 0xC4	; 196
      8c:	f8 e1       	ldi	r31, 0x18	; 24
      8e:	02 c0       	rjmp	.+4      	; 0x94 <.do_copy_data_start>

00000090 <.do_copy_data_loop>:
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0

00000094 <.do_copy_data_start>:
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <.do_copy_data_loop>
      9a:	0e 94 a6 02 	call	0x54c	; 0x54c <main>
      9e:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Config>:
* Description: Configures the ADC in free-running mode, AVcc as ref, prescalar as 128
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void ADC_Config()
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    ADMUX = 0x40;       // ADMUX6 = 1 ---- AVcc as reference
      ae:	ec e7       	ldi	r30, 0x7C	; 124
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e4       	ldi	r24, 0x40	; 64
      b4:	80 83       	st	Z, r24
    ADCSRB = 0x00;      // free-running mode selected
      b6:	eb e7       	ldi	r30, 0x7B	; 123
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	10 82       	st	Z, r1
    ADCSRA = 0x07;      // ADCSRA2:0 = 111 ----- 128 prescalar
      bc:	ea e7       	ldi	r30, 0x7A	; 122
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	87 e0       	ldi	r24, 0x07	; 7
      c2:	80 83       	st	Z, r24
}
      c4:	cf 91       	pop	r28
      c6:	df 91       	pop	r29
      c8:	08 95       	ret

000000ca <ADC_Convert_Channel0>:
* Description: Selects channel 0 and converts it once
* Arguments: None
* Returns: uint8_16 ADC value
  ------------------------------------------------------------------------  */
uint16_t ADC_Convert_Channel0()
{
      ca:	df 93       	push	r29
      cc:	cf 93       	push	r28
      ce:	00 d0       	rcall	.+0      	; 0xd0 <ADC_Convert_Channel0+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADMUX, 2);
      d4:	ac e7       	ldi	r26, 0x7C	; 124
      d6:	b0 e0       	ldi	r27, 0x00	; 0
      d8:	ec e7       	ldi	r30, 0x7C	; 124
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	8b 7f       	andi	r24, 0xFB	; 251
      e0:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, 1);
      e2:	ac e7       	ldi	r26, 0x7C	; 124
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	ec e7       	ldi	r30, 0x7C	; 124
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	8d 7f       	andi	r24, 0xFD	; 253
      ee:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, 0);      // channel 0 selected, ADMUX2:0 = 000
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	ec e7       	ldi	r30, 0x7C	; 124
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	8e 7f       	andi	r24, 0xFE	; 254
      fc:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, 7);     // ADEN set
      fe:	aa e7       	ldi	r26, 0x7A	; 122
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	ea e7       	ldi	r30, 0x7A	; 122
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	80 68       	ori	r24, 0x80	; 128
     10a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, 6);     // ADSC set
     10c:	aa e7       	ldi	r26, 0x7A	; 122
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	ea e7       	ldi	r30, 0x7A	; 122
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	80 64       	ori	r24, 0x40	; 64
     118:	8c 93       	st	X, r24

    while(ADCSRA & (1 << ADSC));        // till conversion is on, wait
     11a:	ea e7       	ldi	r30, 0x7A	; 122
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	88 2f       	mov	r24, r24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	80 74       	andi	r24, 0x40	; 64
     126:	90 70       	andi	r25, 0x00	; 0
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	b9 f7       	brne	.-18     	; 0x11a <ADC_Convert_Channel0+0x50>
    uint16_t result = ADC;
     12c:	e8 e7       	ldi	r30, 0x78	; 120
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	91 81       	ldd	r25, Z+1	; 0x01
     134:	9a 83       	std	Y+2, r25	; 0x02
     136:	89 83       	std	Y+1, r24	; 0x01

    CLR_BIT(ADCSRA, 7);     // clear ADEN, shut the ADC
     138:	aa e7       	ldi	r26, 0x7A	; 122
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	ea e7       	ldi	r30, 0x7A	; 122
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	8f 77       	andi	r24, 0x7F	; 127
     144:	8c 93       	st	X, r24
    return result;
     146:	89 81       	ldd	r24, Y+1	; 0x01
     148:	9a 81       	ldd	r25, Y+2	; 0x02
}
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <ADC_Convert_Channel1>:
* Description: Selects channel 1 and converts it once
* Arguments: None
* Returns: uint8_16 ADC value
  ------------------------------------------------------------------------  */
uint16_t ADC_Convert_Channel1()
{
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	00 d0       	rcall	.+0      	; 0x15a <ADC_Convert_Channel1+0x6>
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADMUX, 2);
     15e:	ac e7       	ldi	r26, 0x7C	; 124
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	ec e7       	ldi	r30, 0x7C	; 124
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	8b 7f       	andi	r24, 0xFB	; 251
     16a:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, 1);
     16c:	ac e7       	ldi	r26, 0x7C	; 124
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	ec e7       	ldi	r30, 0x7C	; 124
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	8d 7f       	andi	r24, 0xFD	; 253
     178:	8c 93       	st	X, r24
    SET_BIT(ADMUX, 0);      // channel 1 selected, ADMUX2:0 = 001
     17a:	ac e7       	ldi	r26, 0x7C	; 124
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	ec e7       	ldi	r30, 0x7C	; 124
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	81 60       	ori	r24, 0x01	; 1
     186:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, 7);     // ADEN set
     188:	aa e7       	ldi	r26, 0x7A	; 122
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	ea e7       	ldi	r30, 0x7A	; 122
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	80 68       	ori	r24, 0x80	; 128
     194:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, 6);     // ADSC set
     196:	aa e7       	ldi	r26, 0x7A	; 122
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	ea e7       	ldi	r30, 0x7A	; 122
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	80 64       	ori	r24, 0x40	; 64
     1a2:	8c 93       	st	X, r24

    while(ADCSRA & (1 << ADSC));        // till conversion is on, wait
     1a4:	ea e7       	ldi	r30, 0x7A	; 122
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 2f       	mov	r24, r24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	80 74       	andi	r24, 0x40	; 64
     1b0:	90 70       	andi	r25, 0x00	; 0
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	b9 f7       	brne	.-18     	; 0x1a4 <ADC_Convert_Channel1+0x50>
    uint16_t result = ADC;
     1b6:	e8 e7       	ldi	r30, 0x78	; 120
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	91 81       	ldd	r25, Z+1	; 0x01
     1be:	9a 83       	std	Y+2, r25	; 0x02
     1c0:	89 83       	std	Y+1, r24	; 0x01

    CLR_BIT(ADCSRA, 7);     // clear ADEN, shut the ADC
     1c2:	aa e7       	ldi	r26, 0x7A	; 122
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	ea e7       	ldi	r30, 0x7A	; 122
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	8f 77       	andi	r24, 0x7F	; 127
     1ce:	8c 93       	st	X, r24
    return result;
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	cf 91       	pop	r28
     1da:	df 91       	pop	r29
     1dc:	08 95       	ret

000001de <ADC_Convert_Channel2>:
* Description: Selects channel 2 and converts it once
* Arguments: None
* Returns: uint8_16 ADC value
  ------------------------------------------------------------------------  */
uint16_t ADC_Convert_Channel2()
{
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <ADC_Convert_Channel2+0x6>
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADMUX, 2);
     1e8:	ac e7       	ldi	r26, 0x7C	; 124
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ec e7       	ldi	r30, 0x7C	; 124
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	8b 7f       	andi	r24, 0xFB	; 251
     1f4:	8c 93       	st	X, r24
    SET_BIT(ADMUX, 1);
     1f6:	ac e7       	ldi	r26, 0x7C	; 124
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	ec e7       	ldi	r30, 0x7C	; 124
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	82 60       	ori	r24, 0x02	; 2
     202:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, 0);      // channel 1 selected, ADMUX2:0 = 010
     204:	ac e7       	ldi	r26, 0x7C	; 124
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	ec e7       	ldi	r30, 0x7C	; 124
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	8e 7f       	andi	r24, 0xFE	; 254
     210:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, 7);     // ADEN set
     212:	aa e7       	ldi	r26, 0x7A	; 122
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	ea e7       	ldi	r30, 0x7A	; 122
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	80 68       	ori	r24, 0x80	; 128
     21e:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, 6);     // ADSC set
     220:	aa e7       	ldi	r26, 0x7A	; 122
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	ea e7       	ldi	r30, 0x7A	; 122
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	80 64       	ori	r24, 0x40	; 64
     22c:	8c 93       	st	X, r24

    while(ADCSRA & (1 << ADSC));        // till conversion is on, wait
     22e:	ea e7       	ldi	r30, 0x7A	; 122
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	88 2f       	mov	r24, r24
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	80 74       	andi	r24, 0x40	; 64
     23a:	90 70       	andi	r25, 0x00	; 0
     23c:	00 97       	sbiw	r24, 0x00	; 0
     23e:	b9 f7       	brne	.-18     	; 0x22e <ADC_Convert_Channel2+0x50>
    uint16_t result = ADC;
     240:	e8 e7       	ldi	r30, 0x78	; 120
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	91 81       	ldd	r25, Z+1	; 0x01
     248:	9a 83       	std	Y+2, r25	; 0x02
     24a:	89 83       	std	Y+1, r24	; 0x01

    CLR_BIT(ADCSRA, 7);     // clear ADEN, shut the ADC
     24c:	aa e7       	ldi	r26, 0x7A	; 122
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	ea e7       	ldi	r30, 0x7A	; 122
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	8f 77       	andi	r24, 0x7F	; 127
     258:	8c 93       	st	X, r24
    return result;
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	cf 91       	pop	r28
     264:	df 91       	pop	r29
     266:	08 95       	ret

00000268 <ADC_Convert_Channel3>:
* Description: Selects channel 3 and converts it once
* Arguments: None
* Returns: uint8_16 ADC value
  ------------------------------------------------------------------------  */
uint16_t ADC_Convert_Channel3()
{
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	00 d0       	rcall	.+0      	; 0x26e <ADC_Convert_Channel3+0x6>
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADMUX, 2);
     272:	ac e7       	ldi	r26, 0x7C	; 124
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	ec e7       	ldi	r30, 0x7C	; 124
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	8b 7f       	andi	r24, 0xFB	; 251
     27e:	8c 93       	st	X, r24
    SET_BIT(ADMUX, 1);
     280:	ac e7       	ldi	r26, 0x7C	; 124
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	ec e7       	ldi	r30, 0x7C	; 124
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	82 60       	ori	r24, 0x02	; 2
     28c:	8c 93       	st	X, r24
    SET_BIT(ADMUX, 0);      // channel 1 selected, ADMUX2:0 = 011
     28e:	ac e7       	ldi	r26, 0x7C	; 124
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	ec e7       	ldi	r30, 0x7C	; 124
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	81 60       	ori	r24, 0x01	; 1
     29a:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, 7);     // ADEN set
     29c:	aa e7       	ldi	r26, 0x7A	; 122
     29e:	b0 e0       	ldi	r27, 0x00	; 0
     2a0:	ea e7       	ldi	r30, 0x7A	; 122
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	80 68       	ori	r24, 0x80	; 128
     2a8:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, 6);     // ADSC set
     2aa:	aa e7       	ldi	r26, 0x7A	; 122
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	ea e7       	ldi	r30, 0x7A	; 122
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	80 64       	ori	r24, 0x40	; 64
     2b6:	8c 93       	st	X, r24

    while(ADCSRA & (1 << ADSC));        // till conversion is on, wait
     2b8:	ea e7       	ldi	r30, 0x7A	; 122
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	80 74       	andi	r24, 0x40	; 64
     2c4:	90 70       	andi	r25, 0x00	; 0
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	b9 f7       	brne	.-18     	; 0x2b8 <ADC_Convert_Channel3+0x50>
    uint16_t result = ADC;
     2ca:	e8 e7       	ldi	r30, 0x78	; 120
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	91 81       	ldd	r25, Z+1	; 0x01
     2d2:	9a 83       	std	Y+2, r25	; 0x02
     2d4:	89 83       	std	Y+1, r24	; 0x01

    CLR_BIT(ADCSRA, 7);     // clear ADEN, shut the ADC
     2d6:	aa e7       	ldi	r26, 0x7A	; 122
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	ea e7       	ldi	r30, 0x7A	; 122
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	8f 77       	andi	r24, 0x7F	; 127
     2e2:	8c 93       	st	X, r24
    return result;
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	cf 91       	pop	r28
     2ee:	df 91       	pop	r29
     2f0:	08 95       	ret

000002f2 <ADC_Convert_Channel4>:
* Description: Selects channel 4 and converts it once
* Arguments: None
* Returns: uint8_16 ADC value
  ------------------------------------------------------------------------  */
uint16_t ADC_Convert_Channel4()
{
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <ADC_Convert_Channel4+0x6>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADMUX, 2);
     2fc:	ac e7       	ldi	r26, 0x7C	; 124
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	ec e7       	ldi	r30, 0x7C	; 124
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	84 60       	ori	r24, 0x04	; 4
     308:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, 1);
     30a:	ac e7       	ldi	r26, 0x7C	; 124
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	ec e7       	ldi	r30, 0x7C	; 124
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	8d 7f       	andi	r24, 0xFD	; 253
     316:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, 0);      // channel 1 selected, ADMUX2:0 = 100
     318:	ac e7       	ldi	r26, 0x7C	; 124
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	ec e7       	ldi	r30, 0x7C	; 124
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	80 81       	ld	r24, Z
     322:	8e 7f       	andi	r24, 0xFE	; 254
     324:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, 7);     // ADEN set
     326:	aa e7       	ldi	r26, 0x7A	; 122
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	ea e7       	ldi	r30, 0x7A	; 122
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	80 68       	ori	r24, 0x80	; 128
     332:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, 6);     // ADSC set
     334:	aa e7       	ldi	r26, 0x7A	; 122
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	ea e7       	ldi	r30, 0x7A	; 122
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	80 64       	ori	r24, 0x40	; 64
     340:	8c 93       	st	X, r24

    while(ADCSRA & (1 << ADSC));        // till conversion is on, wait
     342:	ea e7       	ldi	r30, 0x7A	; 122
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	88 2f       	mov	r24, r24
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	80 74       	andi	r24, 0x40	; 64
     34e:	90 70       	andi	r25, 0x00	; 0
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	b9 f7       	brne	.-18     	; 0x342 <ADC_Convert_Channel4+0x50>
    uint16_t result = ADC;
     354:	e8 e7       	ldi	r30, 0x78	; 120
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	91 81       	ldd	r25, Z+1	; 0x01
     35c:	9a 83       	std	Y+2, r25	; 0x02
     35e:	89 83       	std	Y+1, r24	; 0x01

    CLR_BIT(ADCSRA, 7);     // clear ADEN, shut the ADC
     360:	aa e7       	ldi	r26, 0x7A	; 122
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	ea e7       	ldi	r30, 0x7A	; 122
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	8f 77       	andi	r24, 0x7F	; 127
     36c:	8c 93       	st	X, r24
    return result;
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	9a 81       	ldd	r25, Y+2	; 0x02
}
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	cf 91       	pop	r28
     378:	df 91       	pop	r29
     37a:	08 95       	ret

0000037c <ADC_Convert_Channel5>:
* Description: Selects channel 5 and converts it once
* Arguments: None
* Returns: uint8_16 ADC value
  ------------------------------------------------------------------------  */
uint16_t ADC_Convert_Channel5()
{
     37c:	df 93       	push	r29
     37e:	cf 93       	push	r28
     380:	00 d0       	rcall	.+0      	; 0x382 <ADC_Convert_Channel5+0x6>
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(ADMUX, 2);
     386:	ac e7       	ldi	r26, 0x7C	; 124
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	ec e7       	ldi	r30, 0x7C	; 124
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	80 81       	ld	r24, Z
     390:	84 60       	ori	r24, 0x04	; 4
     392:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, 1);
     394:	ac e7       	ldi	r26, 0x7C	; 124
     396:	b0 e0       	ldi	r27, 0x00	; 0
     398:	ec e7       	ldi	r30, 0x7C	; 124
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	8d 7f       	andi	r24, 0xFD	; 253
     3a0:	8c 93       	st	X, r24
    SET_BIT(ADMUX, 0);      // channel 1 selected, ADMUX2:0 = 101
     3a2:	ac e7       	ldi	r26, 0x7C	; 124
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	ec e7       	ldi	r30, 0x7C	; 124
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	81 60       	ori	r24, 0x01	; 1
     3ae:	8c 93       	st	X, r24

    SET_BIT(ADCSRA, 7);     // ADEN set
     3b0:	aa e7       	ldi	r26, 0x7A	; 122
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	ea e7       	ldi	r30, 0x7A	; 122
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	80 68       	ori	r24, 0x80	; 128
     3bc:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, 6);     // ADSC set
     3be:	aa e7       	ldi	r26, 0x7A	; 122
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	ea e7       	ldi	r30, 0x7A	; 122
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	80 64       	ori	r24, 0x40	; 64
     3ca:	8c 93       	st	X, r24

    while(ADCSRA & (1 << ADSC));        // till conversion is on, wait
     3cc:	ea e7       	ldi	r30, 0x7A	; 122
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	88 2f       	mov	r24, r24
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	80 74       	andi	r24, 0x40	; 64
     3d8:	90 70       	andi	r25, 0x00	; 0
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	b9 f7       	brne	.-18     	; 0x3cc <ADC_Convert_Channel5+0x50>
    uint16_t result = ADC;
     3de:	e8 e7       	ldi	r30, 0x78	; 120
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	91 81       	ldd	r25, Z+1	; 0x01
     3e6:	9a 83       	std	Y+2, r25	; 0x02
     3e8:	89 83       	std	Y+1, r24	; 0x01

    CLR_BIT(ADCSRA, 7);     // clear ADEN, shut the ADC
     3ea:	aa e7       	ldi	r26, 0x7A	; 122
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	ea e7       	ldi	r30, 0x7A	; 122
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	8f 77       	andi	r24, 0x7F	; 127
     3f6:	8c 93       	st	X, r24
    return result;
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	9a 81       	ldd	r25, Y+2	; 0x02
}
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <GPIO_config>:
* Description: Configures the mode of the pin as INPUT/PULLUP or OUTPUT
* Arguments: pin and state
* Returns: None
  ------------------------------------------------------------------------  */
void GPIO_config(uint8_t PIN, uint8_t STATE)
{
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	00 d0       	rcall	.+0      	; 0x40c <GPIO_config+0x6>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	89 83       	std	Y+1, r24	; 0x01
     412:	6a 83       	std	Y+2, r22	; 0x02
    if(STATE == OUTPUT)
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	a1 f4       	brne	.+40     	; 0x442 <GPIO_config+0x3c>
    {
        SET_BIT(DDRD, PIN);
     41a:	aa e2       	ldi	r26, 0x2A	; 42
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	ea e2       	ldi	r30, 0x2A	; 42
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	48 2f       	mov	r20, r24
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	28 2f       	mov	r18, r24
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	02 2e       	mov	r0, r18
     432:	02 c0       	rjmp	.+4      	; 0x438 <GPIO_config+0x32>
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	0a 94       	dec	r0
     43a:	e2 f7       	brpl	.-8      	; 0x434 <GPIO_config+0x2e>
     43c:	84 2b       	or	r24, r20
     43e:	8c 93       	st	X, r24
     440:	26 c0       	rjmp	.+76     	; 0x48e <GPIO_config+0x88>
    }
    else
    {
        CLR_BIT(DDRD, PIN);
     442:	aa e2       	ldi	r26, 0x2A	; 42
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	ea e2       	ldi	r30, 0x2A	; 42
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	48 2f       	mov	r20, r24
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	28 2f       	mov	r18, r24
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	02 c0       	rjmp	.+4      	; 0x45e <GPIO_config+0x58>
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	2a 95       	dec	r18
     460:	e2 f7       	brpl	.-8      	; 0x45a <GPIO_config+0x54>
     462:	80 95       	com	r24
     464:	84 23       	and	r24, r20
     466:	8c 93       	st	X, r24
        SET_BIT(PORTD, PIN);
     468:	ab e2       	ldi	r26, 0x2B	; 43
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	eb e2       	ldi	r30, 0x2B	; 43
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	48 2f       	mov	r20, r24
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	02 2e       	mov	r0, r18
     480:	02 c0       	rjmp	.+4      	; 0x486 <GPIO_config+0x80>
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	0a 94       	dec	r0
     488:	e2 f7       	brpl	.-8      	; 0x482 <GPIO_config+0x7c>
     48a:	84 2b       	or	r24, r20
     48c:	8c 93       	st	X, r24
    }
}
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	cf 91       	pop	r28
     494:	df 91       	pop	r29
     496:	08 95       	ret

00000498 <GPIO_pin_write>:
* Description: sets the mode of the pin either HIGH or LOW
* Arguments: pin and mode
* Returns: None
  ------------------------------------------------------------------------  */
void GPIO_pin_write(uint8_t PIN, uint8_t MODE)
{
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	00 d0       	rcall	.+0      	; 0x49e <GPIO_pin_write+0x6>
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	6a 83       	std	Y+2, r22	; 0x02
    if(MODE == HIGH)
     4a6:	8a 81       	ldd	r24, Y+2	; 0x02
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	a1 f4       	brne	.+40     	; 0x4d4 <GPIO_pin_write+0x3c>
    {
        SET_BIT(PORTD, PIN);
     4ac:	ab e2       	ldi	r26, 0x2B	; 43
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	eb e2       	ldi	r30, 0x2B	; 43
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	48 2f       	mov	r20, r24
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	28 2f       	mov	r18, r24
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 2e       	mov	r0, r18
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <GPIO_pin_write+0x32>
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	0a 94       	dec	r0
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <GPIO_pin_write+0x2e>
     4ce:	84 2b       	or	r24, r20
     4d0:	8c 93       	st	X, r24
     4d2:	14 c0       	rjmp	.+40     	; 0x4fc <GPIO_pin_write+0x64>
    }
    else
    {
        CLR_BIT(PORTD, PIN);
     4d4:	ab e2       	ldi	r26, 0x2B	; 43
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	eb e2       	ldi	r30, 0x2B	; 43
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	48 2f       	mov	r20, r24
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	28 2f       	mov	r18, r24
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 2e       	mov	r0, r18
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <GPIO_pin_write+0x5a>
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	0a 94       	dec	r0
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <GPIO_pin_write+0x56>
     4f6:	80 95       	com	r24
     4f8:	84 23       	and	r24, r20
     4fa:	8c 93       	st	X, r24
    }
}
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	cf 91       	pop	r28
     502:	df 91       	pop	r29
     504:	08 95       	ret

00000506 <GPIO_pin_read>:
* Description: reads the status of the pin
* Arguments: pin
* Returns: 1 or 0
  ------------------------------------------------------------------------  */
uint8_t GPIO_pin_read(uint8_t PIN)
{
     506:	df 93       	push	r29
     508:	cf 93       	push	r28
     50a:	00 d0       	rcall	.+0      	; 0x50c <GPIO_pin_read+0x6>
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	89 83       	std	Y+1, r24	; 0x01
    if(PIND & (1 << PIN))  // if pin is high
     512:	e9 e2       	ldi	r30, 0x29	; 41
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	28 2f       	mov	r18, r24
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a9 01       	movw	r20, r18
     524:	02 c0       	rjmp	.+4      	; 0x52a <GPIO_pin_read+0x24>
     526:	55 95       	asr	r21
     528:	47 95       	ror	r20
     52a:	8a 95       	dec	r24
     52c:	e2 f7       	brpl	.-8      	; 0x526 <GPIO_pin_read+0x20>
     52e:	ca 01       	movw	r24, r20
     530:	81 70       	andi	r24, 0x01	; 1
     532:	90 70       	andi	r25, 0x00	; 0
     534:	88 23       	and	r24, r24
     536:	19 f0       	breq	.+6      	; 0x53e <GPIO_pin_read+0x38>
    {
        return 1;
     538:	51 e0       	ldi	r21, 0x01	; 1
     53a:	5a 83       	std	Y+2, r21	; 0x02
     53c:	01 c0       	rjmp	.+2      	; 0x540 <GPIO_pin_read+0x3a>
    }
    else
    {
        return 0;
     53e:	1a 82       	std	Y+2, r1	; 0x02
     540:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <main>:
* Description: The main function of the PROGRAM
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void main()
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	00 d0       	rcall	.+0      	; 0x552 <main+0x6>
     552:	0f 92       	push	r0
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
    System_Init();
     558:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <System_Init>
    uint8_t brake_pedal;
    uint16_t slip_ratio;

    while(1)
    {
        brake_pedal = Pedal_Pressed();
     55c:	0e 94 ef 05 	call	0xbde	; 0xbde <Pedal_Pressed>
     560:	8b 83       	std	Y+3, r24	; 0x03
        slip_ratio = Get_Slip_Ratio();
     562:	0e 94 20 06 	call	0xc40	; 0xc40 <Get_Slip_Ratio>
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	89 83       	std	Y+1, r24	; 0x01

        if(brake_pedal == 1) // brake pedal not pressed
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	39 f4       	brne	.+14     	; 0x57e <main+0x32>
        {
            Deactivate_ABS_Indicator();
     570:	0e 94 12 06 	call	0xc24	; 0xc24 <Deactivate_ABS_Indicator>
            Stop_Timer0();
     574:	0e 94 44 05 	call	0xa88	; 0xa88 <Stop_Timer0>
            Stop_Timer2();
     578:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Stop_Timer2>
     57c:	ef cf       	rjmp	.-34     	; 0x55c <main+0x10>
        }

        else if(brake_pedal == 0 && slip_ratio > 819)   // brake pedal pressed and wheel slip >= 0.8
     57e:	8b 81       	ldd	r24, Y+3	; 0x03
     580:	88 23       	and	r24, r24
     582:	69 f4       	brne	.+26     	; 0x59e <main+0x52>
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	23 e0       	ldi	r18, 0x03	; 3
     58a:	84 33       	cpi	r24, 0x34	; 52
     58c:	92 07       	cpc	r25, r18
     58e:	38 f0       	brcs	.+14     	; 0x59e <main+0x52>
        {
            Activate_ABS_Indicator();       // control handed over to ABS
     590:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Activate_ABS_Indicator>
            Stop_Timer0();
     594:	0e 94 44 05 	call	0xa88	; 0xa88 <Stop_Timer0>
            Stop_Timer2();
     598:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <Stop_Timer2>
     59c:	df cf       	rjmp	.-66     	; 0x55c <main+0x10>
        }

        else        // pedal pressed and slip < 0.8
        {
            Start_Timer0();
     59e:	0e 94 28 05 	call	0xa50	; 0xa50 <Start_Timer0>
            Start_Timer2();
     5a2:	0e 94 60 05 	call	0xac0	; 0xac0 <Start_Timer2>
            Deactivate_ABS_Indicator();
     5a6:	0e 94 12 06 	call	0xc24	; 0xc24 <Deactivate_ABS_Indicator>

            Read_Load_AllWheels();      // get the loading of all the wheels
     5aa:	0e 94 98 05 	call	0xb30	; 0xb30 <Read_Load_AllWheels>
            Read_YawRate();
     5ae:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Read_YawRate>
            Adjust_DutyCycles();
     5b2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Adjust_DutyCycles>
     5b6:	d2 cf       	rjmp	.-92     	; 0x55c <main+0x10>

000005b8 <Adjust_DutyCycles>:
/* ****************************************************************************
* Name: Adjust_DutyCycles()
* Description: Adjusts the duty cycles of the PWM outputs
******************************************************************************/
void Adjust_DutyCycles()
{
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
    duty_cycle_lf = (float)wheel_load_lf / 10.2 + yaw_right_adjustment;
     5c8:	80 91 0d 02 	lds	r24, 0x020D
     5cc:	90 91 0e 02 	lds	r25, 0x020E
     5d0:	cc 01       	movw	r24, r24
     5d2:	a0 e0       	ldi	r26, 0x00	; 0
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	bc 01       	movw	r22, r24
     5d8:	cd 01       	movw	r24, r26
     5da:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatunsisf>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	bc 01       	movw	r22, r24
     5e4:	cd 01       	movw	r24, r26
     5e6:	23 e3       	ldi	r18, 0x33	; 51
     5e8:	33 e3       	ldi	r19, 0x33	; 51
     5ea:	43 e2       	ldi	r20, 0x23	; 35
     5ec:	51 e4       	ldi	r21, 0x41	; 65
     5ee:	0e 94 06 08 	call	0x100c	; 0x100c <__divsf3>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	7c 01       	movw	r14, r24
     5f8:	8d 01       	movw	r16, r26
     5fa:	80 91 13 02 	lds	r24, 0x0213
     5fe:	88 2f       	mov	r24, r24
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	aa 27       	eor	r26, r26
     604:	97 fd       	sbrc	r25, 7
     606:	a0 95       	com	r26
     608:	ba 2f       	mov	r27, r26
     60a:	bc 01       	movw	r22, r24
     60c:	cd 01       	movw	r24, r26
     60e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__floatsisf>
     612:	9b 01       	movw	r18, r22
     614:	ac 01       	movw	r20, r24
     616:	c8 01       	movw	r24, r16
     618:	b7 01       	movw	r22, r14
     61a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	bc 01       	movw	r22, r24
     624:	cd 01       	movw	r24, r26
     626:	0e 94 30 06 	call	0xc60	; 0xc60 <__fixunssfsi>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	80 93 12 02 	sts	0x0212, r24
    duty_cycle_lr = (float)wheel_load_lr / 10.2 + yaw_right_adjustment;
     632:	80 91 0f 02 	lds	r24, 0x020F
     636:	90 91 10 02 	lds	r25, 0x0210
     63a:	cc 01       	movw	r24, r24
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	bc 01       	movw	r22, r24
     642:	cd 01       	movw	r24, r26
     644:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatunsisf>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	23 e3       	ldi	r18, 0x33	; 51
     652:	33 e3       	ldi	r19, 0x33	; 51
     654:	43 e2       	ldi	r20, 0x23	; 35
     656:	51 e4       	ldi	r21, 0x41	; 65
     658:	0e 94 06 08 	call	0x100c	; 0x100c <__divsf3>
     65c:	dc 01       	movw	r26, r24
     65e:	cb 01       	movw	r24, r22
     660:	7c 01       	movw	r14, r24
     662:	8d 01       	movw	r16, r26
     664:	80 91 13 02 	lds	r24, 0x0213
     668:	88 2f       	mov	r24, r24
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	aa 27       	eor	r26, r26
     66e:	97 fd       	sbrc	r25, 7
     670:	a0 95       	com	r26
     672:	ba 2f       	mov	r27, r26
     674:	bc 01       	movw	r22, r24
     676:	cd 01       	movw	r24, r26
     678:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__floatsisf>
     67c:	9b 01       	movw	r18, r22
     67e:	ac 01       	movw	r20, r24
     680:	c8 01       	movw	r24, r16
     682:	b7 01       	movw	r22, r14
     684:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 30 06 	call	0xc60	; 0xc60 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	80 93 11 02 	sts	0x0211, r24
    duty_cycle_rf = (float)wheel_load_rf / 10.2 + yaw_left_adjustment;
     69c:	80 91 14 02 	lds	r24, 0x0214
     6a0:	90 91 15 02 	lds	r25, 0x0215
     6a4:	cc 01       	movw	r24, r24
     6a6:	a0 e0       	ldi	r26, 0x00	; 0
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatunsisf>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	23 e3       	ldi	r18, 0x33	; 51
     6bc:	33 e3       	ldi	r19, 0x33	; 51
     6be:	43 e2       	ldi	r20, 0x23	; 35
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	0e 94 06 08 	call	0x100c	; 0x100c <__divsf3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	7c 01       	movw	r14, r24
     6cc:	8d 01       	movw	r16, r26
     6ce:	80 91 0c 02 	lds	r24, 0x020C
     6d2:	88 2f       	mov	r24, r24
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	aa 27       	eor	r26, r26
     6d8:	97 fd       	sbrc	r25, 7
     6da:	a0 95       	com	r26
     6dc:	ba 2f       	mov	r27, r26
     6de:	bc 01       	movw	r22, r24
     6e0:	cd 01       	movw	r24, r26
     6e2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__floatsisf>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	c8 01       	movw	r24, r16
     6ec:	b7 01       	movw	r22, r14
     6ee:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	bc 01       	movw	r22, r24
     6f8:	cd 01       	movw	r24, r26
     6fa:	0e 94 30 06 	call	0xc60	; 0xc60 <__fixunssfsi>
     6fe:	dc 01       	movw	r26, r24
     700:	cb 01       	movw	r24, r22
     702:	80 93 0a 02 	sts	0x020A, r24
    duty_cycle_rr = (float)wheel_load_rr / 10.2 + yaw_left_adjustment;
     706:	80 91 08 02 	lds	r24, 0x0208
     70a:	90 91 09 02 	lds	r25, 0x0209
     70e:	cc 01       	movw	r24, r24
     710:	a0 e0       	ldi	r26, 0x00	; 0
     712:	b0 e0       	ldi	r27, 0x00	; 0
     714:	bc 01       	movw	r22, r24
     716:	cd 01       	movw	r24, r26
     718:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatunsisf>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	23 e3       	ldi	r18, 0x33	; 51
     726:	33 e3       	ldi	r19, 0x33	; 51
     728:	43 e2       	ldi	r20, 0x23	; 35
     72a:	51 e4       	ldi	r21, 0x41	; 65
     72c:	0e 94 06 08 	call	0x100c	; 0x100c <__divsf3>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	7c 01       	movw	r14, r24
     736:	8d 01       	movw	r16, r26
     738:	80 91 0c 02 	lds	r24, 0x020C
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	aa 27       	eor	r26, r26
     742:	97 fd       	sbrc	r25, 7
     744:	a0 95       	com	r26
     746:	ba 2f       	mov	r27, r26
     748:	bc 01       	movw	r22, r24
     74a:	cd 01       	movw	r24, r26
     74c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__floatsisf>
     750:	9b 01       	movw	r18, r22
     752:	ac 01       	movw	r20, r24
     754:	c8 01       	movw	r24, r16
     756:	b7 01       	movw	r22, r14
     758:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__addsf3>
     75c:	dc 01       	movw	r26, r24
     75e:	cb 01       	movw	r24, r22
     760:	bc 01       	movw	r22, r24
     762:	cd 01       	movw	r24, r26
     764:	0e 94 30 06 	call	0xc60	; 0xc60 <__fixunssfsi>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	80 93 0b 02 	sts	0x020B, r24

    if(duty_cycle_lf > 100)
     770:	80 91 12 02 	lds	r24, 0x0212
     774:	85 36       	cpi	r24, 0x65	; 101
     776:	18 f0       	brcs	.+6      	; 0x77e <Adjust_DutyCycles+0x1c6>
    {
        duty_cycle_lf = 100;
     778:	84 e6       	ldi	r24, 0x64	; 100
     77a:	80 93 12 02 	sts	0x0212, r24
    }
    if(duty_cycle_rf > 100)
     77e:	80 91 0a 02 	lds	r24, 0x020A
     782:	85 36       	cpi	r24, 0x65	; 101
     784:	18 f0       	brcs	.+6      	; 0x78c <Adjust_DutyCycles+0x1d4>
    {
        duty_cycle_rf = 100;
     786:	84 e6       	ldi	r24, 0x64	; 100
     788:	80 93 0a 02 	sts	0x020A, r24
    }
    if(duty_cycle_lr > 100)
     78c:	80 91 11 02 	lds	r24, 0x0211
     790:	85 36       	cpi	r24, 0x65	; 101
     792:	18 f0       	brcs	.+6      	; 0x79a <Adjust_DutyCycles+0x1e2>
    {
        duty_cycle_lr = 100;
     794:	84 e6       	ldi	r24, 0x64	; 100
     796:	80 93 11 02 	sts	0x0211, r24
    }
    if(duty_cycle_rr > 100)
     79a:	80 91 0b 02 	lds	r24, 0x020B
     79e:	85 36       	cpi	r24, 0x65	; 101
     7a0:	18 f0       	brcs	.+6      	; 0x7a8 <Adjust_DutyCycles+0x1f0>
    {
        duty_cycle_rr = 100;
     7a2:	84 e6       	ldi	r24, 0x64	; 100
     7a4:	80 93 0b 02 	sts	0x020B, r24
    }

    Set_DutyCycle_OCR0A(duty_cycle_lf);
     7a8:	80 91 12 02 	lds	r24, 0x0212
     7ac:	0e 94 94 04 	call	0x928	; 0x928 <Set_DutyCycle_OCR0A>
    Set_DutyCycle_OCR0B(duty_cycle_rf);
     7b0:	80 91 0a 02 	lds	r24, 0x020A
     7b4:	0e 94 b9 04 	call	0x972	; 0x972 <Set_DutyCycle_OCR0B>
    Set_DutyCycle_OCR2A(duty_cycle_lr);
     7b8:	80 91 11 02 	lds	r24, 0x0211
     7bc:	0e 94 de 04 	call	0x9bc	; 0x9bc <Set_DutyCycle_OCR2A>
    Set_DutyCycle_OCR2B(duty_cycle_rr);
     7c0:	80 91 0b 02 	lds	r24, 0x020B
     7c4:	0e 94 03 05 	call	0xa06	; 0xa06 <Set_DutyCycle_OCR2B>
}
     7c8:	cf 91       	pop	r28
     7ca:	df 91       	pop	r29
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	08 95       	ret

000007d6 <Read_YawRate>:
               530 - 500 = no turn
               below 500 - right turn
               above 530 - left turn
******************************************************************************/
void Read_YawRate()
{
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	00 d0       	rcall	.+0      	; 0x7dc <Read_YawRate+0x6>
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
    uint16_t absolute_yaw_value = ADC_Convert_Channel5();
     7e0:	0e 94 be 01 	call	0x37c	; 0x37c <ADC_Convert_Channel5>
     7e4:	9a 83       	std	Y+2, r25	; 0x02
     7e6:	89 83       	std	Y+1, r24	; 0x01
    if(absolute_yaw_value > 530)        // indicative of left turn based on potentiometer setting.
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	22 e0       	ldi	r18, 0x02	; 2
     7ee:	83 31       	cpi	r24, 0x13	; 19
     7f0:	92 07       	cpc	r25, r18
     7f2:	a0 f0       	brcs	.+40     	; 0x81c <Read_YawRate+0x46>
    {
        absolute_yaw_value = absolute_yaw_value % 530;
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	22 e1       	ldi	r18, 0x12	; 18
     7fa:	32 e0       	ldi	r19, 0x02	; 2
     7fc:	b9 01       	movw	r22, r18
     7fe:	0e 94 02 0c 	call	0x1804	; 0x1804 <__udivmodhi4>
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 83       	std	Y+1, r24	; 0x01
        yaw_left_adjustment = absolute_yaw_value / 30;      // reduce to appreciable levels
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	2e e1       	ldi	r18, 0x1E	; 30
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	b9 01       	movw	r22, r18
     810:	0e 94 02 0c 	call	0x1804	; 0x1804 <__udivmodhi4>
     814:	cb 01       	movw	r24, r22
     816:	80 93 0c 02 	sts	0x020C, r24
     81a:	1f c0       	rjmp	.+62     	; 0x85a <Read_YawRate+0x84>
    }
    else if(absolute_yaw_value < 500)   // indicative of right turn based on potentiometer setting
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	84 3f       	cpi	r24, 0xF4	; 244
     824:	94 07       	cpc	r25, r20
     826:	a8 f4       	brcc	.+42     	; 0x852 <Read_YawRate+0x7c>
    {
        absolute_yaw_value = 500 - absolute_yaw_value;
     828:	24 ef       	ldi	r18, 0xF4	; 244
     82a:	31 e0       	ldi	r19, 0x01	; 1
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	9a 81       	ldd	r25, Y+2	; 0x02
     830:	a9 01       	movw	r20, r18
     832:	48 1b       	sub	r20, r24
     834:	59 0b       	sbc	r21, r25
     836:	ca 01       	movw	r24, r20
     838:	9a 83       	std	Y+2, r25	; 0x02
     83a:	89 83       	std	Y+1, r24	; 0x01
        yaw_right_adjustment = absolute_yaw_value / 30;
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	2e e1       	ldi	r18, 0x1E	; 30
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	b9 01       	movw	r22, r18
     846:	0e 94 02 0c 	call	0x1804	; 0x1804 <__udivmodhi4>
     84a:	cb 01       	movw	r24, r22
     84c:	80 93 13 02 	sts	0x0213, r24
     850:	04 c0       	rjmp	.+8      	; 0x85a <Read_YawRate+0x84>
    }
    else
    {
        yaw_left_adjustment = 0;
     852:	10 92 0c 02 	sts	0x020C, r1
        yaw_right_adjustment = 0;
     856:	10 92 13 02 	sts	0x0213, r1
    }
}
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	cf 91       	pop	r28
     860:	df 91       	pop	r29
     862:	08 95       	ret

00000864 <Timer0_Config>:
* Description: Configures Timer 0 in Phase Correct PWM and inverting mode
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Timer0_Config()
{
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(DDRD, PD5);     // OC0B as an output
     86c:	aa e2       	ldi	r26, 0x2A	; 42
     86e:	b0 e0       	ldi	r27, 0x00	; 0
     870:	ea e2       	ldi	r30, 0x2A	; 42
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	80 62       	ori	r24, 0x20	; 32
     878:	8c 93       	st	X, r24
    SET_BIT(DDRD, PD6);     // OC0A as an output
     87a:	aa e2       	ldi	r26, 0x2A	; 42
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	ea e2       	ldi	r30, 0x2A	; 42
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	80 64       	ori	r24, 0x40	; 64
     886:	8c 93       	st	X, r24
    SET_BIT(TCCR0A, 0);     // WGM00 = 1
     888:	a4 e4       	ldi	r26, 0x44	; 68
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e4 e4       	ldi	r30, 0x44	; 68
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	81 60       	ori	r24, 0x01	; 1
     894:	8c 93       	st	X, r24
    CLR_BIT(TCCR0A, 1);     // WGM01 = 0
     896:	a4 e4       	ldi	r26, 0x44	; 68
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e4 e4       	ldi	r30, 0x44	; 68
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	8d 7f       	andi	r24, 0xFD	; 253
     8a2:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B, 3);     // WGM02 = 0 - phase correct PWM
     8a4:	a5 e4       	ldi	r26, 0x45	; 69
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e5 e4       	ldi	r30, 0x45	; 69
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	87 7f       	andi	r24, 0xF7	; 247
     8b0:	8c 93       	st	X, r24

    TCCR0A |= ((1 << 7) | (1 << 6) | (1 << 5) | (1 << 4));  // inverting mode for 0C0A and OC0B
     8b2:	a4 e4       	ldi	r26, 0x44	; 68
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	e4 e4       	ldi	r30, 0x44	; 68
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	80 6f       	ori	r24, 0xF0	; 240
     8be:	8c 93       	st	X, r24
}
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	08 95       	ret

000008c6 <Timer2_Config>:
* Description: Configures Timer 2 in Phase Correct PWM and inverting mode
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Timer2_Config()
{
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(DDRD, PD3);     // 0C2A as an output
     8ce:	aa e2       	ldi	r26, 0x2A	; 42
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	ea e2       	ldi	r30, 0x2A	; 42
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	88 60       	ori	r24, 0x08	; 8
     8da:	8c 93       	st	X, r24
    SET_BIT(DDRB, PB3);     // OC0B as an output
     8dc:	a4 e2       	ldi	r26, 0x24	; 36
     8de:	b0 e0       	ldi	r27, 0x00	; 0
     8e0:	e4 e2       	ldi	r30, 0x24	; 36
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	88 60       	ori	r24, 0x08	; 8
     8e8:	8c 93       	st	X, r24
    SET_BIT(TCCR2A, 0);     // WGM00 = 1
     8ea:	a0 eb       	ldi	r26, 0xB0	; 176
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e0 eb       	ldi	r30, 0xB0	; 176
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	81 60       	ori	r24, 0x01	; 1
     8f6:	8c 93       	st	X, r24
    CLR_BIT(TCCR2A, 1);     // WGM01 = 0
     8f8:	a0 eb       	ldi	r26, 0xB0	; 176
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e0 eb       	ldi	r30, 0xB0	; 176
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	8d 7f       	andi	r24, 0xFD	; 253
     904:	8c 93       	st	X, r24
    CLR_BIT(TCCR2B, 3);     // WGM02 = 0 - phase correct PWM
     906:	a1 eb       	ldi	r26, 0xB1	; 177
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e1 eb       	ldi	r30, 0xB1	; 177
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	87 7f       	andi	r24, 0xF7	; 247
     912:	8c 93       	st	X, r24

    TCCR2A |= ((1 << 7) | (1 << 6) | (1 << 5) | (1 << 4));  // inverting mode for 0C0A and OC0B
     914:	a0 eb       	ldi	r26, 0xB0	; 176
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e0 eb       	ldi	r30, 0xB0	; 176
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	80 6f       	ori	r24, 0xF0	; 240
     920:	8c 93       	st	X, r24
}
     922:	cf 91       	pop	r28
     924:	df 91       	pop	r29
     926:	08 95       	ret

00000928 <Set_DutyCycle_OCR0A>:
* Description: Sets the value of 0C0A register
* Arguments: uint8_t value
* Returns: None
  ------------------------------------------------------------------------  */
void Set_DutyCycle_OCR0A(uint8_t val)
{
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	0f 92       	push	r0
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	89 83       	std	Y+1, r24	; 0x01
    OCR0A = 255 - val*255/100;
     934:	e7 e4       	ldi	r30, 0x47	; 71
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	48 2f       	mov	r20, r24
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	ca 01       	movw	r24, r20
     940:	9c 01       	movw	r18, r24
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	c9 01       	movw	r24, r18
     948:	96 95       	lsr	r25
     94a:	98 2f       	mov	r25, r24
     94c:	88 27       	eor	r24, r24
     94e:	97 95       	ror	r25
     950:	87 95       	ror	r24
     952:	82 1b       	sub	r24, r18
     954:	93 0b       	sbc	r25, r19
     956:	84 0f       	add	r24, r20
     958:	95 1f       	adc	r25, r21
     95a:	24 e6       	ldi	r18, 0x64	; 100
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	b9 01       	movw	r22, r18
     960:	0e 94 16 0c 	call	0x182c	; 0x182c <__divmodhi4>
     964:	cb 01       	movw	r24, r22
     966:	80 95       	com	r24
     968:	80 83       	st	Z, r24
}
     96a:	0f 90       	pop	r0
     96c:	cf 91       	pop	r28
     96e:	df 91       	pop	r29
     970:	08 95       	ret

00000972 <Set_DutyCycle_OCR0B>:
* Description: Sets the value of 0C0B register
* Arguments: uint8_t value
* Returns: None
  ------------------------------------------------------------------------  */
void Set_DutyCycle_OCR0B(uint8_t val)
{
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	0f 92       	push	r0
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	89 83       	std	Y+1, r24	; 0x01
    OCR0B = 255 - val*255/100;
     97e:	e8 e4       	ldi	r30, 0x48	; 72
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	48 2f       	mov	r20, r24
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	ca 01       	movw	r24, r20
     98a:	9c 01       	movw	r18, r24
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	c9 01       	movw	r24, r18
     992:	96 95       	lsr	r25
     994:	98 2f       	mov	r25, r24
     996:	88 27       	eor	r24, r24
     998:	97 95       	ror	r25
     99a:	87 95       	ror	r24
     99c:	82 1b       	sub	r24, r18
     99e:	93 0b       	sbc	r25, r19
     9a0:	84 0f       	add	r24, r20
     9a2:	95 1f       	adc	r25, r21
     9a4:	24 e6       	ldi	r18, 0x64	; 100
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	b9 01       	movw	r22, r18
     9aa:	0e 94 16 0c 	call	0x182c	; 0x182c <__divmodhi4>
     9ae:	cb 01       	movw	r24, r22
     9b0:	80 95       	com	r24
     9b2:	80 83       	st	Z, r24
}
     9b4:	0f 90       	pop	r0
     9b6:	cf 91       	pop	r28
     9b8:	df 91       	pop	r29
     9ba:	08 95       	ret

000009bc <Set_DutyCycle_OCR2A>:
* Description: Sets the value of 0C2A register
* Arguments: uint8_t value
* Returns: None
  ------------------------------------------------------------------------  */
void Set_DutyCycle_OCR2A(uint8_t val)
{
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	0f 92       	push	r0
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	89 83       	std	Y+1, r24	; 0x01
    OCR2A = 255 - val*255/100;
     9c8:	e3 eb       	ldi	r30, 0xB3	; 179
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	48 2f       	mov	r20, r24
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	ca 01       	movw	r24, r20
     9d4:	9c 01       	movw	r18, r24
     9d6:	22 0f       	add	r18, r18
     9d8:	33 1f       	adc	r19, r19
     9da:	c9 01       	movw	r24, r18
     9dc:	96 95       	lsr	r25
     9de:	98 2f       	mov	r25, r24
     9e0:	88 27       	eor	r24, r24
     9e2:	97 95       	ror	r25
     9e4:	87 95       	ror	r24
     9e6:	82 1b       	sub	r24, r18
     9e8:	93 0b       	sbc	r25, r19
     9ea:	84 0f       	add	r24, r20
     9ec:	95 1f       	adc	r25, r21
     9ee:	24 e6       	ldi	r18, 0x64	; 100
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	b9 01       	movw	r22, r18
     9f4:	0e 94 16 0c 	call	0x182c	; 0x182c <__divmodhi4>
     9f8:	cb 01       	movw	r24, r22
     9fa:	80 95       	com	r24
     9fc:	80 83       	st	Z, r24
}
     9fe:	0f 90       	pop	r0
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	08 95       	ret

00000a06 <Set_DutyCycle_OCR2B>:
* Description: Sets the value of 0C2B register
* Arguments: uint8_t value
* Returns: None
  ------------------------------------------------------------------------  */
void Set_DutyCycle_OCR2B(uint8_t val)
{
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	0f 92       	push	r0
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	89 83       	std	Y+1, r24	; 0x01
    OCR2B = 255 - val*255/100;
     a12:	e4 eb       	ldi	r30, 0xB4	; 180
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	48 2f       	mov	r20, r24
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	ca 01       	movw	r24, r20
     a1e:	9c 01       	movw	r18, r24
     a20:	22 0f       	add	r18, r18
     a22:	33 1f       	adc	r19, r19
     a24:	c9 01       	movw	r24, r18
     a26:	96 95       	lsr	r25
     a28:	98 2f       	mov	r25, r24
     a2a:	88 27       	eor	r24, r24
     a2c:	97 95       	ror	r25
     a2e:	87 95       	ror	r24
     a30:	82 1b       	sub	r24, r18
     a32:	93 0b       	sbc	r25, r19
     a34:	84 0f       	add	r24, r20
     a36:	95 1f       	adc	r25, r21
     a38:	24 e6       	ldi	r18, 0x64	; 100
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	b9 01       	movw	r22, r18
     a3e:	0e 94 16 0c 	call	0x182c	; 0x182c <__divmodhi4>
     a42:	cb 01       	movw	r24, r22
     a44:	80 95       	com	r24
     a46:	80 83       	st	Z, r24
}
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <Start_Timer0>:
* Description: Sets the timer with prescalar of 1024
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Start_Timer0()
{
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR0B, 2);     // CS02 = 1
     a58:	a5 e4       	ldi	r26, 0x45	; 69
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e5 e4       	ldi	r30, 0x45	; 69
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	84 60       	ori	r24, 0x04	; 4
     a64:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B, 1);     // CS01 = 0
     a66:	a5 e4       	ldi	r26, 0x45	; 69
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e5 e4       	ldi	r30, 0x45	; 69
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8d 7f       	andi	r24, 0xFD	; 253
     a72:	8c 93       	st	X, r24
    SET_BIT(TCCR0B, 0);     // CS00 = 1 - timer prescalar of 1024
     a74:	a5 e4       	ldi	r26, 0x45	; 69
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	e5 e4       	ldi	r30, 0x45	; 69
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	81 60       	ori	r24, 0x01	; 1
     a80:	8c 93       	st	X, r24
}
     a82:	cf 91       	pop	r28
     a84:	df 91       	pop	r29
     a86:	08 95       	ret

00000a88 <Stop_Timer0>:
* Description: Stops timer 0
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Stop_Timer0()
{
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TCCR0B, 2);     // CS02 = 0
     a90:	a5 e4       	ldi	r26, 0x45	; 69
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	e5 e4       	ldi	r30, 0x45	; 69
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	8b 7f       	andi	r24, 0xFB	; 251
     a9c:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B, 1);     // CS01 = 0
     a9e:	a5 e4       	ldi	r26, 0x45	; 69
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e5 e4       	ldi	r30, 0x45	; 69
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	8d 7f       	andi	r24, 0xFD	; 253
     aaa:	8c 93       	st	X, r24
    CLR_BIT(TCCR0B, 0);     // CS00 = 0 - timer stopped
     aac:	a5 e4       	ldi	r26, 0x45	; 69
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	e5 e4       	ldi	r30, 0x45	; 69
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	8e 7f       	andi	r24, 0xFE	; 254
     ab8:	8c 93       	st	X, r24
}
     aba:	cf 91       	pop	r28
     abc:	df 91       	pop	r29
     abe:	08 95       	ret

00000ac0 <Start_Timer2>:
* Description: Sets the timer 2 with prescalar of 1024
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Start_Timer2()
{
     ac0:	df 93       	push	r29
     ac2:	cf 93       	push	r28
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR2B, 2);     // CS02 = 1
     ac8:	a1 eb       	ldi	r26, 0xB1	; 177
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	e1 eb       	ldi	r30, 0xB1	; 177
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	84 60       	ori	r24, 0x04	; 4
     ad4:	8c 93       	st	X, r24
    SET_BIT(TCCR2B, 1);     // CS01 = 1
     ad6:	a1 eb       	ldi	r26, 0xB1	; 177
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	e1 eb       	ldi	r30, 0xB1	; 177
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	82 60       	ori	r24, 0x02	; 2
     ae2:	8c 93       	st	X, r24
    SET_BIT(TCCR2B, 0);     // CS00 = 1 - timer prescalar of 1024
     ae4:	a1 eb       	ldi	r26, 0xB1	; 177
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	e1 eb       	ldi	r30, 0xB1	; 177
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	8c 93       	st	X, r24
}
     af2:	cf 91       	pop	r28
     af4:	df 91       	pop	r29
     af6:	08 95       	ret

00000af8 <Stop_Timer2>:
* Description: Stops timer 2
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Stop_Timer2()
{
     af8:	df 93       	push	r29
     afa:	cf 93       	push	r28
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TCCR2B, 2);     // CS02 = 0
     b00:	a1 eb       	ldi	r26, 0xB1	; 177
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e1 eb       	ldi	r30, 0xB1	; 177
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	8b 7f       	andi	r24, 0xFB	; 251
     b0c:	8c 93       	st	X, r24
    CLR_BIT(TCCR2B, 1);     // CS01 = 0
     b0e:	a1 eb       	ldi	r26, 0xB1	; 177
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	e1 eb       	ldi	r30, 0xB1	; 177
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	8d 7f       	andi	r24, 0xFD	; 253
     b1a:	8c 93       	st	X, r24
    CLR_BIT(TCCR2B, 0);     // CS00 = 0 - timer stopped
     b1c:	a1 eb       	ldi	r26, 0xB1	; 177
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e1 eb       	ldi	r30, 0xB1	; 177
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	8e 7f       	andi	r24, 0xFE	; 254
     b28:	8c 93       	st	X, r24
}
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <Read_Load_AllWheels>:
* Description: Reads the left front wheel load, connected to ADC1 channel
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Read_Load_AllWheels()
{
     b30:	df 93       	push	r29
     b32:	cf 93       	push	r28
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
    wheel_load_lf = ADC_Convert_Channel1();
     b38:	0e 94 aa 00 	call	0x154	; 0x154 <ADC_Convert_Channel1>
     b3c:	90 93 0e 02 	sts	0x020E, r25
     b40:	80 93 0d 02 	sts	0x020D, r24
    wheel_load_rf = ADC_Convert_Channel2();
     b44:	0e 94 ef 00 	call	0x1de	; 0x1de <ADC_Convert_Channel2>
     b48:	90 93 15 02 	sts	0x0215, r25
     b4c:	80 93 14 02 	sts	0x0214, r24
    wheel_load_lr = ADC_Convert_Channel3();
     b50:	0e 94 34 01 	call	0x268	; 0x268 <ADC_Convert_Channel3>
     b54:	90 93 10 02 	sts	0x0210, r25
     b58:	80 93 0f 02 	sts	0x020F, r24
    wheel_load_rr = ADC_Convert_Channel4();
     b5c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ADC_Convert_Channel4>
     b60:	90 93 09 02 	sts	0x0209, r25
     b64:	80 93 08 02 	sts	0x0208, r24
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <Init_GPIO>:
* Description: Configures all the GPIO pins to be used as inputs or outputs
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Init_GPIO()
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
    GPIO_config(PD0, OUTPUT);       // brake pedal light
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	0e 94 03 02 	call	0x406	; 0x406 <GPIO_config>
    GPIO_config(PD1, OUTPUT);       // EBD on light
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	0e 94 03 02 	call	0x406	; 0x406 <GPIO_config>
    GPIO_config(PD2, OUTPUT);       // ABS on light
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	0e 94 03 02 	call	0x406	; 0x406 <GPIO_config>
    GPIO_config(PD4, INPUT);        // brake pedal input pin
     b8e:	84 e0       	ldi	r24, 0x04	; 4
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	0e 94 03 02 	call	0x406	; 0x406 <GPIO_config>
}
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <Init_PWM>:
* Description: Configures the PWM module as phase correct PWM and the compare pins as output
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Init_PWM()
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
    Timer0_Config();        // configures timer0
     ba4:	0e 94 32 04 	call	0x864	; 0x864 <Timer0_Config>
    Timer2_Config();        // configures timer2
     ba8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <Timer2_Config>
}
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <Init_ADC>:
* Description: Configures the ADC module in free running mode
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Init_ADC()
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
    ADC_Config();
     bba:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Config>
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <System_Init>:
* Description: Calls all the Init functions written above
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void System_Init()
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
    Init_GPIO();
     bcc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <Init_GPIO>
    Init_PWM();
     bd0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Init_PWM>
    Init_ADC();
     bd4:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <Init_ADC>
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <Pedal_Pressed>:
* Description: Checks if the brake pedal is pressed or no
* Arguments: None
* Returns: uint8_t pressed
  ------------------------------------------------------------------------  */
uint8_t Pedal_Pressed()
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
    uint8_t pressed = GPIO_pin_read(4);
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	0e 94 83 02 	call	0x506	; 0x506 <GPIO_pin_read>
     bee:	89 83       	std	Y+1, r24	; 0x01
    return pressed;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <Activate_ABS_Indicator>:
* Description: Turn on EBD light
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Activate_ABS_Indicator()
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(DDRC, 6);
     c02:	a7 e2       	ldi	r26, 0x27	; 39
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e2       	ldi	r30, 0x27	; 39
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	8c 93       	st	X, r24
    SET_BIT(PORTC, 6);
     c10:	a8 e2       	ldi	r26, 0x28	; 40
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e8 e2       	ldi	r30, 0x28	; 40
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	8c 93       	st	X, r24
    //GPIO_pin_write(PD1, HIGH);
}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <Deactivate_ABS_Indicator>:
* Description: Turn off EBD light
* Arguments: None
* Returns: None
  ------------------------------------------------------------------------  */
void Deactivate_ABS_Indicator()
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(PORTC, 6);
     c2c:	a8 e2       	ldi	r26, 0x28	; 40
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e8 e2       	ldi	r30, 0x28	; 40
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	8f 7b       	andi	r24, 0xBF	; 191
     c38:	8c 93       	st	X, r24
}
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <Get_Slip_Ratio>:
* Description: Read Slip Ratio Value from ABS Algo, in the code, turn the ADC knob at ADC0
* Arguments: None
* Returns: uint16_t Slip value in 10-bit resolution
  ------------------------------------------------------------------------  */
uint16_t Get_Slip_Ratio()
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <Get_Slip_Ratio+0x6>
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
    uint16_t slip_ratio = ADC_Convert_Channel0();
     c4a:	0e 94 65 00 	call	0xca	; 0xca <ADC_Convert_Channel0>
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
    return slip_ratio;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <__fixunssfsi>:
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	7b 01       	movw	r14, r22
     c6a:	8c 01       	movw	r16, r24
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	5f e4       	ldi	r21, 0x4F	; 79
     c74:	0e 94 b2 08 	call	0x1164	; 0x1164 <__gesf2>
     c78:	88 23       	and	r24, r24
     c7a:	8c f0       	brlt	.+34     	; 0xc9e <__fixunssfsi+0x3e>
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	5f e4       	ldi	r21, 0x4F	; 79
     c88:	0e 94 a8 07 	call	0xf50	; 0xf50 <__subsf3>
     c8c:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     c90:	9b 01       	movw	r18, r22
     c92:	ac 01       	movw	r20, r24
     c94:	20 50       	subi	r18, 0x00	; 0
     c96:	30 40       	sbci	r19, 0x00	; 0
     c98:	40 40       	sbci	r20, 0x00	; 0
     c9a:	50 48       	sbci	r21, 0x80	; 128
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <__fixunssfsi+0x4a>
     c9e:	c8 01       	movw	r24, r16
     ca0:	b7 01       	movw	r22, r14
     ca2:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     ca6:	9b 01       	movw	r18, r22
     ca8:	ac 01       	movw	r20, r24
     caa:	b9 01       	movw	r22, r18
     cac:	ca 01       	movw	r24, r20
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	08 95       	ret

00000cb8 <_fpadd_parts>:
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e2 e6       	ldi	r30, 0x62	; 98
     cbe:	f6 e0       	ldi	r31, 0x06	; 6
     cc0:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__prologue_saves__>
     cc4:	dc 01       	movw	r26, r24
     cc6:	2b 01       	movw	r4, r22
     cc8:	fa 01       	movw	r30, r20
     cca:	9c 91       	ld	r25, X
     ccc:	92 30       	cpi	r25, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <_fpadd_parts+0x1a>
     cd0:	39 c1       	rjmp	.+626    	; 0xf44 <_fpadd_parts+0x28c>
     cd2:	eb 01       	movw	r28, r22
     cd4:	88 81       	ld	r24, Y
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	08 f4       	brcc	.+2      	; 0xcdc <_fpadd_parts+0x24>
     cda:	33 c1       	rjmp	.+614    	; 0xf42 <_fpadd_parts+0x28a>
     cdc:	94 30       	cpi	r25, 0x04	; 4
     cde:	69 f4       	brne	.+26     	; 0xcfa <_fpadd_parts+0x42>
     ce0:	84 30       	cpi	r24, 0x04	; 4
     ce2:	09 f0       	breq	.+2      	; 0xce6 <_fpadd_parts+0x2e>
     ce4:	2f c1       	rjmp	.+606    	; 0xf44 <_fpadd_parts+0x28c>
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	9c 91       	ld	r25, X
     cea:	11 97       	sbiw	r26, 0x01	; 1
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	98 17       	cp	r25, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <_fpadd_parts+0x3c>
     cf2:	28 c1       	rjmp	.+592    	; 0xf44 <_fpadd_parts+0x28c>
     cf4:	a0 e0       	ldi	r26, 0x00	; 0
     cf6:	b1 e0       	ldi	r27, 0x01	; 1
     cf8:	25 c1       	rjmp	.+586    	; 0xf44 <_fpadd_parts+0x28c>
     cfa:	84 30       	cpi	r24, 0x04	; 4
     cfc:	09 f4       	brne	.+2      	; 0xd00 <_fpadd_parts+0x48>
     cfe:	21 c1       	rjmp	.+578    	; 0xf42 <_fpadd_parts+0x28a>
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	a9 f4       	brne	.+42     	; 0xd2e <_fpadd_parts+0x76>
     d04:	92 30       	cpi	r25, 0x02	; 2
     d06:	09 f0       	breq	.+2      	; 0xd0a <_fpadd_parts+0x52>
     d08:	1d c1       	rjmp	.+570    	; 0xf44 <_fpadd_parts+0x28c>
     d0a:	9a 01       	movw	r18, r20
     d0c:	ad 01       	movw	r20, r26
     d0e:	88 e0       	ldi	r24, 0x08	; 8
     d10:	ea 01       	movw	r28, r20
     d12:	09 90       	ld	r0, Y+
     d14:	ae 01       	movw	r20, r28
     d16:	e9 01       	movw	r28, r18
     d18:	09 92       	st	Y+, r0
     d1a:	9e 01       	movw	r18, r28
     d1c:	81 50       	subi	r24, 0x01	; 1
     d1e:	c1 f7       	brne	.-16     	; 0xd10 <_fpadd_parts+0x58>
     d20:	e2 01       	movw	r28, r4
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	11 96       	adiw	r26, 0x01	; 1
     d26:	9c 91       	ld	r25, X
     d28:	89 23       	and	r24, r25
     d2a:	81 83       	std	Z+1, r24	; 0x01
     d2c:	08 c1       	rjmp	.+528    	; 0xf3e <_fpadd_parts+0x286>
     d2e:	92 30       	cpi	r25, 0x02	; 2
     d30:	09 f4       	brne	.+2      	; 0xd34 <_fpadd_parts+0x7c>
     d32:	07 c1       	rjmp	.+526    	; 0xf42 <_fpadd_parts+0x28a>
     d34:	12 96       	adiw	r26, 0x02	; 2
     d36:	2d 90       	ld	r2, X+
     d38:	3c 90       	ld	r3, X
     d3a:	13 97       	sbiw	r26, 0x03	; 3
     d3c:	eb 01       	movw	r28, r22
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	9b 81       	ldd	r25, Y+3	; 0x03
     d42:	14 96       	adiw	r26, 0x04	; 4
     d44:	ad 90       	ld	r10, X+
     d46:	bd 90       	ld	r11, X+
     d48:	cd 90       	ld	r12, X+
     d4a:	dc 90       	ld	r13, X
     d4c:	17 97       	sbiw	r26, 0x07	; 7
     d4e:	ec 80       	ldd	r14, Y+4	; 0x04
     d50:	fd 80       	ldd	r15, Y+5	; 0x05
     d52:	0e 81       	ldd	r16, Y+6	; 0x06
     d54:	1f 81       	ldd	r17, Y+7	; 0x07
     d56:	91 01       	movw	r18, r2
     d58:	28 1b       	sub	r18, r24
     d5a:	39 0b       	sbc	r19, r25
     d5c:	b9 01       	movw	r22, r18
     d5e:	37 ff       	sbrs	r19, 7
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <_fpadd_parts+0xb2>
     d62:	66 27       	eor	r22, r22
     d64:	77 27       	eor	r23, r23
     d66:	62 1b       	sub	r22, r18
     d68:	73 0b       	sbc	r23, r19
     d6a:	60 32       	cpi	r22, 0x20	; 32
     d6c:	71 05       	cpc	r23, r1
     d6e:	0c f0       	brlt	.+2      	; 0xd72 <_fpadd_parts+0xba>
     d70:	61 c0       	rjmp	.+194    	; 0xe34 <_fpadd_parts+0x17c>
     d72:	12 16       	cp	r1, r18
     d74:	13 06       	cpc	r1, r19
     d76:	6c f5       	brge	.+90     	; 0xdd2 <_fpadd_parts+0x11a>
     d78:	37 01       	movw	r6, r14
     d7a:	48 01       	movw	r8, r16
     d7c:	06 2e       	mov	r0, r22
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <_fpadd_parts+0xd0>
     d80:	96 94       	lsr	r9
     d82:	87 94       	ror	r8
     d84:	77 94       	ror	r7
     d86:	67 94       	ror	r6
     d88:	0a 94       	dec	r0
     d8a:	d2 f7       	brpl	.-12     	; 0xd80 <_fpadd_parts+0xc8>
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <_fpadd_parts+0xe6>
     d96:	22 0f       	add	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	44 1f       	adc	r20, r20
     d9c:	55 1f       	adc	r21, r21
     d9e:	6a 95       	dec	r22
     da0:	d2 f7       	brpl	.-12     	; 0xd96 <_fpadd_parts+0xde>
     da2:	21 50       	subi	r18, 0x01	; 1
     da4:	30 40       	sbci	r19, 0x00	; 0
     da6:	40 40       	sbci	r20, 0x00	; 0
     da8:	50 40       	sbci	r21, 0x00	; 0
     daa:	2e 21       	and	r18, r14
     dac:	3f 21       	and	r19, r15
     dae:	40 23       	and	r20, r16
     db0:	51 23       	and	r21, r17
     db2:	21 15       	cp	r18, r1
     db4:	31 05       	cpc	r19, r1
     db6:	41 05       	cpc	r20, r1
     db8:	51 05       	cpc	r21, r1
     dba:	21 f0       	breq	.+8      	; 0xdc4 <_fpadd_parts+0x10c>
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	79 01       	movw	r14, r18
     dc6:	8a 01       	movw	r16, r20
     dc8:	e6 28       	or	r14, r6
     dca:	f7 28       	or	r15, r7
     dcc:	08 29       	or	r16, r8
     dce:	19 29       	or	r17, r9
     dd0:	3c c0       	rjmp	.+120    	; 0xe4a <_fpadd_parts+0x192>
     dd2:	23 2b       	or	r18, r19
     dd4:	d1 f1       	breq	.+116    	; 0xe4a <_fpadd_parts+0x192>
     dd6:	26 0e       	add	r2, r22
     dd8:	37 1e       	adc	r3, r23
     dda:	35 01       	movw	r6, r10
     ddc:	46 01       	movw	r8, r12
     dde:	06 2e       	mov	r0, r22
     de0:	04 c0       	rjmp	.+8      	; 0xdea <_fpadd_parts+0x132>
     de2:	96 94       	lsr	r9
     de4:	87 94       	ror	r8
     de6:	77 94       	ror	r7
     de8:	67 94       	ror	r6
     dea:	0a 94       	dec	r0
     dec:	d2 f7       	brpl	.-12     	; 0xde2 <_fpadd_parts+0x12a>
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <_fpadd_parts+0x148>
     df8:	22 0f       	add	r18, r18
     dfa:	33 1f       	adc	r19, r19
     dfc:	44 1f       	adc	r20, r20
     dfe:	55 1f       	adc	r21, r21
     e00:	6a 95       	dec	r22
     e02:	d2 f7       	brpl	.-12     	; 0xdf8 <_fpadd_parts+0x140>
     e04:	21 50       	subi	r18, 0x01	; 1
     e06:	30 40       	sbci	r19, 0x00	; 0
     e08:	40 40       	sbci	r20, 0x00	; 0
     e0a:	50 40       	sbci	r21, 0x00	; 0
     e0c:	2a 21       	and	r18, r10
     e0e:	3b 21       	and	r19, r11
     e10:	4c 21       	and	r20, r12
     e12:	5d 21       	and	r21, r13
     e14:	21 15       	cp	r18, r1
     e16:	31 05       	cpc	r19, r1
     e18:	41 05       	cpc	r20, r1
     e1a:	51 05       	cpc	r21, r1
     e1c:	21 f0       	breq	.+8      	; 0xe26 <_fpadd_parts+0x16e>
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	59 01       	movw	r10, r18
     e28:	6a 01       	movw	r12, r20
     e2a:	a6 28       	or	r10, r6
     e2c:	b7 28       	or	r11, r7
     e2e:	c8 28       	or	r12, r8
     e30:	d9 28       	or	r13, r9
     e32:	0b c0       	rjmp	.+22     	; 0xe4a <_fpadd_parts+0x192>
     e34:	82 15       	cp	r24, r2
     e36:	93 05       	cpc	r25, r3
     e38:	2c f0       	brlt	.+10     	; 0xe44 <_fpadd_parts+0x18c>
     e3a:	1c 01       	movw	r2, r24
     e3c:	aa 24       	eor	r10, r10
     e3e:	bb 24       	eor	r11, r11
     e40:	65 01       	movw	r12, r10
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <_fpadd_parts+0x192>
     e44:	ee 24       	eor	r14, r14
     e46:	ff 24       	eor	r15, r15
     e48:	87 01       	movw	r16, r14
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	9c 91       	ld	r25, X
     e4e:	d2 01       	movw	r26, r4
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	8c 91       	ld	r24, X
     e54:	98 17       	cp	r25, r24
     e56:	09 f4       	brne	.+2      	; 0xe5a <_fpadd_parts+0x1a2>
     e58:	45 c0       	rjmp	.+138    	; 0xee4 <_fpadd_parts+0x22c>
     e5a:	99 23       	and	r25, r25
     e5c:	39 f0       	breq	.+14     	; 0xe6c <_fpadd_parts+0x1b4>
     e5e:	a8 01       	movw	r20, r16
     e60:	97 01       	movw	r18, r14
     e62:	2a 19       	sub	r18, r10
     e64:	3b 09       	sbc	r19, r11
     e66:	4c 09       	sbc	r20, r12
     e68:	5d 09       	sbc	r21, r13
     e6a:	06 c0       	rjmp	.+12     	; 0xe78 <_fpadd_parts+0x1c0>
     e6c:	a6 01       	movw	r20, r12
     e6e:	95 01       	movw	r18, r10
     e70:	2e 19       	sub	r18, r14
     e72:	3f 09       	sbc	r19, r15
     e74:	40 0b       	sbc	r20, r16
     e76:	51 0b       	sbc	r21, r17
     e78:	57 fd       	sbrc	r21, 7
     e7a:	08 c0       	rjmp	.+16     	; 0xe8c <_fpadd_parts+0x1d4>
     e7c:	11 82       	std	Z+1, r1	; 0x01
     e7e:	33 82       	std	Z+3, r3	; 0x03
     e80:	22 82       	std	Z+2, r2	; 0x02
     e82:	24 83       	std	Z+4, r18	; 0x04
     e84:	35 83       	std	Z+5, r19	; 0x05
     e86:	46 83       	std	Z+6, r20	; 0x06
     e88:	57 83       	std	Z+7, r21	; 0x07
     e8a:	1d c0       	rjmp	.+58     	; 0xec6 <_fpadd_parts+0x20e>
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	81 83       	std	Z+1, r24	; 0x01
     e90:	33 82       	std	Z+3, r3	; 0x03
     e92:	22 82       	std	Z+2, r2	; 0x02
     e94:	88 27       	eor	r24, r24
     e96:	99 27       	eor	r25, r25
     e98:	dc 01       	movw	r26, r24
     e9a:	82 1b       	sub	r24, r18
     e9c:	93 0b       	sbc	r25, r19
     e9e:	a4 0b       	sbc	r26, r20
     ea0:	b5 0b       	sbc	r27, r21
     ea2:	84 83       	std	Z+4, r24	; 0x04
     ea4:	95 83       	std	Z+5, r25	; 0x05
     ea6:	a6 83       	std	Z+6, r26	; 0x06
     ea8:	b7 83       	std	Z+7, r27	; 0x07
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <_fpadd_parts+0x20e>
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	44 1f       	adc	r20, r20
     eb2:	55 1f       	adc	r21, r21
     eb4:	24 83       	std	Z+4, r18	; 0x04
     eb6:	35 83       	std	Z+5, r19	; 0x05
     eb8:	46 83       	std	Z+6, r20	; 0x06
     eba:	57 83       	std	Z+7, r21	; 0x07
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	93 83       	std	Z+3, r25	; 0x03
     ec4:	82 83       	std	Z+2, r24	; 0x02
     ec6:	24 81       	ldd	r18, Z+4	; 0x04
     ec8:	35 81       	ldd	r19, Z+5	; 0x05
     eca:	46 81       	ldd	r20, Z+6	; 0x06
     ecc:	57 81       	ldd	r21, Z+7	; 0x07
     ece:	da 01       	movw	r26, r20
     ed0:	c9 01       	movw	r24, r18
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	a1 09       	sbc	r26, r1
     ed6:	b1 09       	sbc	r27, r1
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	af 4f       	sbci	r26, 0xFF	; 255
     ede:	bf 43       	sbci	r27, 0x3F	; 63
     ee0:	28 f3       	brcs	.-54     	; 0xeac <_fpadd_parts+0x1f4>
     ee2:	0b c0       	rjmp	.+22     	; 0xefa <_fpadd_parts+0x242>
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	33 82       	std	Z+3, r3	; 0x03
     ee8:	22 82       	std	Z+2, r2	; 0x02
     eea:	ea 0c       	add	r14, r10
     eec:	fb 1c       	adc	r15, r11
     eee:	0c 1d       	adc	r16, r12
     ef0:	1d 1d       	adc	r17, r13
     ef2:	e4 82       	std	Z+4, r14	; 0x04
     ef4:	f5 82       	std	Z+5, r15	; 0x05
     ef6:	06 83       	std	Z+6, r16	; 0x06
     ef8:	17 83       	std	Z+7, r17	; 0x07
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	80 83       	st	Z, r24
     efe:	24 81       	ldd	r18, Z+4	; 0x04
     f00:	35 81       	ldd	r19, Z+5	; 0x05
     f02:	46 81       	ldd	r20, Z+6	; 0x06
     f04:	57 81       	ldd	r21, Z+7	; 0x07
     f06:	57 ff       	sbrs	r21, 7
     f08:	1a c0       	rjmp	.+52     	; 0xf3e <_fpadd_parts+0x286>
     f0a:	c9 01       	movw	r24, r18
     f0c:	aa 27       	eor	r26, r26
     f0e:	97 fd       	sbrc	r25, 7
     f10:	a0 95       	com	r26
     f12:	ba 2f       	mov	r27, r26
     f14:	81 70       	andi	r24, 0x01	; 1
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	a0 70       	andi	r26, 0x00	; 0
     f1a:	b0 70       	andi	r27, 0x00	; 0
     f1c:	56 95       	lsr	r21
     f1e:	47 95       	ror	r20
     f20:	37 95       	ror	r19
     f22:	27 95       	ror	r18
     f24:	82 2b       	or	r24, r18
     f26:	93 2b       	or	r25, r19
     f28:	a4 2b       	or	r26, r20
     f2a:	b5 2b       	or	r27, r21
     f2c:	84 83       	std	Z+4, r24	; 0x04
     f2e:	95 83       	std	Z+5, r25	; 0x05
     f30:	a6 83       	std	Z+6, r26	; 0x06
     f32:	b7 83       	std	Z+7, r27	; 0x07
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	93 83       	std	Z+3, r25	; 0x03
     f3c:	82 83       	std	Z+2, r24	; 0x02
     f3e:	df 01       	movw	r26, r30
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <_fpadd_parts+0x28c>
     f42:	d2 01       	movw	r26, r4
     f44:	cd 01       	movw	r24, r26
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	e2 e1       	ldi	r30, 0x12	; 18
     f4c:	0c 94 45 0c 	jmp	0x188a	; 0x188a <__epilogue_restores__>

00000f50 <__subsf3>:
     f50:	a0 e2       	ldi	r26, 0x20	; 32
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee ea       	ldi	r30, 0xAE	; 174
     f56:	f7 e0       	ldi	r31, 0x07	; 7
     f58:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__prologue_saves__+0x18>
     f5c:	69 83       	std	Y+1, r22	; 0x01
     f5e:	7a 83       	std	Y+2, r23	; 0x02
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	2d 83       	std	Y+5, r18	; 0x05
     f66:	3e 83       	std	Y+6, r19	; 0x06
     f68:	4f 83       	std	Y+7, r20	; 0x07
     f6a:	58 87       	std	Y+8, r21	; 0x08
     f6c:	e9 e0       	ldi	r30, 0x09	; 9
     f6e:	ee 2e       	mov	r14, r30
     f70:	f1 2c       	mov	r15, r1
     f72:	ec 0e       	add	r14, r28
     f74:	fd 1e       	adc	r15, r29
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	b7 01       	movw	r22, r14
     f7c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
     f80:	8e 01       	movw	r16, r28
     f82:	0f 5e       	subi	r16, 0xEF	; 239
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	ce 01       	movw	r24, r28
     f88:	05 96       	adiw	r24, 0x05	; 5
     f8a:	b8 01       	movw	r22, r16
     f8c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
     f90:	8a 89       	ldd	r24, Y+18	; 0x12
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	89 27       	eor	r24, r25
     f96:	8a 8b       	std	Y+18, r24	; 0x12
     f98:	c7 01       	movw	r24, r14
     f9a:	b8 01       	movw	r22, r16
     f9c:	ae 01       	movw	r20, r28
     f9e:	47 5e       	subi	r20, 0xE7	; 231
     fa0:	5f 4f       	sbci	r21, 0xFF	; 255
     fa2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_fpadd_parts>
     fa6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__pack_f>
     faa:	a0 96       	adiw	r28, 0x20	; 32
     fac:	e6 e0       	ldi	r30, 0x06	; 6
     fae:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__epilogue_restores__+0x18>

00000fb2 <__addsf3>:
     fb2:	a0 e2       	ldi	r26, 0x20	; 32
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ef ed       	ldi	r30, 0xDF	; 223
     fb8:	f7 e0       	ldi	r31, 0x07	; 7
     fba:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__prologue_saves__+0x18>
     fbe:	69 83       	std	Y+1, r22	; 0x01
     fc0:	7a 83       	std	Y+2, r23	; 0x02
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	2d 83       	std	Y+5, r18	; 0x05
     fc8:	3e 83       	std	Y+6, r19	; 0x06
     fca:	4f 83       	std	Y+7, r20	; 0x07
     fcc:	58 87       	std	Y+8, r21	; 0x08
     fce:	f9 e0       	ldi	r31, 0x09	; 9
     fd0:	ef 2e       	mov	r14, r31
     fd2:	f1 2c       	mov	r15, r1
     fd4:	ec 0e       	add	r14, r28
     fd6:	fd 1e       	adc	r15, r29
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	b7 01       	movw	r22, r14
     fde:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
     fe2:	8e 01       	movw	r16, r28
     fe4:	0f 5e       	subi	r16, 0xEF	; 239
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	ce 01       	movw	r24, r28
     fea:	05 96       	adiw	r24, 0x05	; 5
     fec:	b8 01       	movw	r22, r16
     fee:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
     ff2:	c7 01       	movw	r24, r14
     ff4:	b8 01       	movw	r22, r16
     ff6:	ae 01       	movw	r20, r28
     ff8:	47 5e       	subi	r20, 0xE7	; 231
     ffa:	5f 4f       	sbci	r21, 0xFF	; 255
     ffc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_fpadd_parts>
    1000:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__pack_f>
    1004:	a0 96       	adiw	r28, 0x20	; 32
    1006:	e6 e0       	ldi	r30, 0x06	; 6
    1008:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__epilogue_restores__+0x18>

0000100c <__divsf3>:
    100c:	a8 e1       	ldi	r26, 0x18	; 24
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ec e0       	ldi	r30, 0x0C	; 12
    1012:	f8 e0       	ldi	r31, 0x08	; 8
    1014:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__prologue_saves__+0x10>
    1018:	69 83       	std	Y+1, r22	; 0x01
    101a:	7a 83       	std	Y+2, r23	; 0x02
    101c:	8b 83       	std	Y+3, r24	; 0x03
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	2d 83       	std	Y+5, r18	; 0x05
    1022:	3e 83       	std	Y+6, r19	; 0x06
    1024:	4f 83       	std	Y+7, r20	; 0x07
    1026:	58 87       	std	Y+8, r21	; 0x08
    1028:	b9 e0       	ldi	r27, 0x09	; 9
    102a:	eb 2e       	mov	r14, r27
    102c:	f1 2c       	mov	r15, r1
    102e:	ec 0e       	add	r14, r28
    1030:	fd 1e       	adc	r15, r29
    1032:	ce 01       	movw	r24, r28
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	b7 01       	movw	r22, r14
    1038:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
    103c:	8e 01       	movw	r16, r28
    103e:	0f 5e       	subi	r16, 0xEF	; 239
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	ce 01       	movw	r24, r28
    1044:	05 96       	adiw	r24, 0x05	; 5
    1046:	b8 01       	movw	r22, r16
    1048:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
    104c:	29 85       	ldd	r18, Y+9	; 0x09
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	08 f4       	brcc	.+2      	; 0x1054 <__divsf3+0x48>
    1052:	7e c0       	rjmp	.+252    	; 0x1150 <__divsf3+0x144>
    1054:	39 89       	ldd	r19, Y+17	; 0x11
    1056:	32 30       	cpi	r19, 0x02	; 2
    1058:	10 f4       	brcc	.+4      	; 0x105e <__divsf3+0x52>
    105a:	b8 01       	movw	r22, r16
    105c:	7c c0       	rjmp	.+248    	; 0x1156 <__divsf3+0x14a>
    105e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1060:	9a 89       	ldd	r25, Y+18	; 0x12
    1062:	89 27       	eor	r24, r25
    1064:	8a 87       	std	Y+10, r24	; 0x0a
    1066:	24 30       	cpi	r18, 0x04	; 4
    1068:	11 f0       	breq	.+4      	; 0x106e <__divsf3+0x62>
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 f4       	brne	.+12     	; 0x107a <__divsf3+0x6e>
    106e:	23 17       	cp	r18, r19
    1070:	09 f0       	breq	.+2      	; 0x1074 <__divsf3+0x68>
    1072:	6e c0       	rjmp	.+220    	; 0x1150 <__divsf3+0x144>
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	71 e0       	ldi	r23, 0x01	; 1
    1078:	6e c0       	rjmp	.+220    	; 0x1156 <__divsf3+0x14a>
    107a:	34 30       	cpi	r19, 0x04	; 4
    107c:	39 f4       	brne	.+14     	; 0x108c <__divsf3+0x80>
    107e:	1d 86       	std	Y+13, r1	; 0x0d
    1080:	1e 86       	std	Y+14, r1	; 0x0e
    1082:	1f 86       	std	Y+15, r1	; 0x0f
    1084:	18 8a       	std	Y+16, r1	; 0x10
    1086:	1c 86       	std	Y+12, r1	; 0x0c
    1088:	1b 86       	std	Y+11, r1	; 0x0b
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <__divsf3+0x88>
    108c:	32 30       	cpi	r19, 0x02	; 2
    108e:	21 f4       	brne	.+8      	; 0x1098 <__divsf3+0x8c>
    1090:	84 e0       	ldi	r24, 0x04	; 4
    1092:	89 87       	std	Y+9, r24	; 0x09
    1094:	b7 01       	movw	r22, r14
    1096:	5f c0       	rjmp	.+190    	; 0x1156 <__divsf3+0x14a>
    1098:	2b 85       	ldd	r18, Y+11	; 0x0b
    109a:	3c 85       	ldd	r19, Y+12	; 0x0c
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	9c 89       	ldd	r25, Y+20	; 0x14
    10a0:	28 1b       	sub	r18, r24
    10a2:	39 0b       	sbc	r19, r25
    10a4:	3c 87       	std	Y+12, r19	; 0x0c
    10a6:	2b 87       	std	Y+11, r18	; 0x0b
    10a8:	ed 84       	ldd	r14, Y+13	; 0x0d
    10aa:	fe 84       	ldd	r15, Y+14	; 0x0e
    10ac:	0f 85       	ldd	r16, Y+15	; 0x0f
    10ae:	18 89       	ldd	r17, Y+16	; 0x10
    10b0:	ad 88       	ldd	r10, Y+21	; 0x15
    10b2:	be 88       	ldd	r11, Y+22	; 0x16
    10b4:	cf 88       	ldd	r12, Y+23	; 0x17
    10b6:	d8 8c       	ldd	r13, Y+24	; 0x18
    10b8:	ea 14       	cp	r14, r10
    10ba:	fb 04       	cpc	r15, r11
    10bc:	0c 05       	cpc	r16, r12
    10be:	1d 05       	cpc	r17, r13
    10c0:	40 f4       	brcc	.+16     	; 0x10d2 <__divsf3+0xc6>
    10c2:	ee 0c       	add	r14, r14
    10c4:	ff 1c       	adc	r15, r15
    10c6:	00 1f       	adc	r16, r16
    10c8:	11 1f       	adc	r17, r17
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	30 40       	sbci	r19, 0x00	; 0
    10ce:	3c 87       	std	Y+12, r19	; 0x0c
    10d0:	2b 87       	std	Y+11, r18	; 0x0b
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e4       	ldi	r27, 0x40	; 64
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	ea 14       	cp	r14, r10
    10e8:	fb 04       	cpc	r15, r11
    10ea:	0c 05       	cpc	r16, r12
    10ec:	1d 05       	cpc	r17, r13
    10ee:	40 f0       	brcs	.+16     	; 0x1100 <__divsf3+0xf4>
    10f0:	28 2b       	or	r18, r24
    10f2:	39 2b       	or	r19, r25
    10f4:	4a 2b       	or	r20, r26
    10f6:	5b 2b       	or	r21, r27
    10f8:	ea 18       	sub	r14, r10
    10fa:	fb 08       	sbc	r15, r11
    10fc:	0c 09       	sbc	r16, r12
    10fe:	1d 09       	sbc	r17, r13
    1100:	b6 95       	lsr	r27
    1102:	a7 95       	ror	r26
    1104:	97 95       	ror	r25
    1106:	87 95       	ror	r24
    1108:	ee 0c       	add	r14, r14
    110a:	ff 1c       	adc	r15, r15
    110c:	00 1f       	adc	r16, r16
    110e:	11 1f       	adc	r17, r17
    1110:	6f 5f       	subi	r22, 0xFF	; 255
    1112:	7f 4f       	sbci	r23, 0xFF	; 255
    1114:	6f 31       	cpi	r22, 0x1F	; 31
    1116:	71 05       	cpc	r23, r1
    1118:	31 f7       	brne	.-52     	; 0x10e6 <__divsf3+0xda>
    111a:	da 01       	movw	r26, r20
    111c:	c9 01       	movw	r24, r18
    111e:	8f 77       	andi	r24, 0x7F	; 127
    1120:	90 70       	andi	r25, 0x00	; 0
    1122:	a0 70       	andi	r26, 0x00	; 0
    1124:	b0 70       	andi	r27, 0x00	; 0
    1126:	80 34       	cpi	r24, 0x40	; 64
    1128:	91 05       	cpc	r25, r1
    112a:	a1 05       	cpc	r26, r1
    112c:	b1 05       	cpc	r27, r1
    112e:	61 f4       	brne	.+24     	; 0x1148 <__divsf3+0x13c>
    1130:	27 fd       	sbrc	r18, 7
    1132:	0a c0       	rjmp	.+20     	; 0x1148 <__divsf3+0x13c>
    1134:	e1 14       	cp	r14, r1
    1136:	f1 04       	cpc	r15, r1
    1138:	01 05       	cpc	r16, r1
    113a:	11 05       	cpc	r17, r1
    113c:	29 f0       	breq	.+10     	; 0x1148 <__divsf3+0x13c>
    113e:	20 5c       	subi	r18, 0xC0	; 192
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	4f 4f       	sbci	r20, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
    1146:	20 78       	andi	r18, 0x80	; 128
    1148:	2d 87       	std	Y+13, r18	; 0x0d
    114a:	3e 87       	std	Y+14, r19	; 0x0e
    114c:	4f 87       	std	Y+15, r20	; 0x0f
    114e:	58 8b       	std	Y+16, r21	; 0x10
    1150:	be 01       	movw	r22, r28
    1152:	67 5f       	subi	r22, 0xF7	; 247
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	cb 01       	movw	r24, r22
    1158:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__pack_f>
    115c:	68 96       	adiw	r28, 0x18	; 24
    115e:	ea e0       	ldi	r30, 0x0A	; 10
    1160:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__epilogue_restores__+0x10>

00001164 <__gesf2>:
    1164:	a8 e1       	ldi	r26, 0x18	; 24
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 eb       	ldi	r30, 0xB8	; 184
    116a:	f8 e0       	ldi	r31, 0x08	; 8
    116c:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__prologue_saves__+0x18>
    1170:	69 83       	std	Y+1, r22	; 0x01
    1172:	7a 83       	std	Y+2, r23	; 0x02
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	2d 83       	std	Y+5, r18	; 0x05
    117a:	3e 83       	std	Y+6, r19	; 0x06
    117c:	4f 83       	std	Y+7, r20	; 0x07
    117e:	58 87       	std	Y+8, r21	; 0x08
    1180:	89 e0       	ldi	r24, 0x09	; 9
    1182:	e8 2e       	mov	r14, r24
    1184:	f1 2c       	mov	r15, r1
    1186:	ec 0e       	add	r14, r28
    1188:	fd 1e       	adc	r15, r29
    118a:	ce 01       	movw	r24, r28
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	b7 01       	movw	r22, r14
    1190:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
    1194:	8e 01       	movw	r16, r28
    1196:	0f 5e       	subi	r16, 0xEF	; 239
    1198:	1f 4f       	sbci	r17, 0xFF	; 255
    119a:	ce 01       	movw	r24, r28
    119c:	05 96       	adiw	r24, 0x05	; 5
    119e:	b8 01       	movw	r22, r16
    11a0:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
    11a4:	89 85       	ldd	r24, Y+9	; 0x09
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	40 f0       	brcs	.+16     	; 0x11ba <__gesf2+0x56>
    11aa:	89 89       	ldd	r24, Y+17	; 0x11
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	28 f0       	brcs	.+10     	; 0x11ba <__gesf2+0x56>
    11b0:	c7 01       	movw	r24, r14
    11b2:	b8 01       	movw	r22, r16
    11b4:	0e 94 a9 0b 	call	0x1752	; 0x1752 <__fpcmp_parts_f>
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <__gesf2+0x58>
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	68 96       	adiw	r28, 0x18	; 24
    11be:	e6 e0       	ldi	r30, 0x06	; 6
    11c0:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__epilogue_restores__+0x18>

000011c4 <__floatsisf>:
    11c4:	a8 e0       	ldi	r26, 0x08	; 8
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e8 ee       	ldi	r30, 0xE8	; 232
    11ca:	f8 e0       	ldi	r31, 0x08	; 8
    11cc:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__prologue_saves__+0x12>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	da 01       	movw	r26, r20
    11da:	c9 01       	movw	r24, r18
    11dc:	88 27       	eor	r24, r24
    11de:	b7 fd       	sbrc	r27, 7
    11e0:	83 95       	inc	r24
    11e2:	99 27       	eor	r25, r25
    11e4:	aa 27       	eor	r26, r26
    11e6:	bb 27       	eor	r27, r27
    11e8:	b8 2e       	mov	r11, r24
    11ea:	21 15       	cp	r18, r1
    11ec:	31 05       	cpc	r19, r1
    11ee:	41 05       	cpc	r20, r1
    11f0:	51 05       	cpc	r21, r1
    11f2:	19 f4       	brne	.+6      	; 0x11fa <__floatsisf+0x36>
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	3a c0       	rjmp	.+116    	; 0x126e <__floatsisf+0xaa>
    11fa:	88 23       	and	r24, r24
    11fc:	a9 f0       	breq	.+42     	; 0x1228 <__floatsisf+0x64>
    11fe:	20 30       	cpi	r18, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	38 07       	cpc	r19, r24
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	48 07       	cpc	r20, r24
    1208:	80 e8       	ldi	r24, 0x80	; 128
    120a:	58 07       	cpc	r21, r24
    120c:	29 f4       	brne	.+10     	; 0x1218 <__floatsisf+0x54>
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	9f ec       	ldi	r25, 0xCF	; 207
    1216:	30 c0       	rjmp	.+96     	; 0x1278 <__floatsisf+0xb4>
    1218:	ee 24       	eor	r14, r14
    121a:	ff 24       	eor	r15, r15
    121c:	87 01       	movw	r16, r14
    121e:	e2 1a       	sub	r14, r18
    1220:	f3 0a       	sbc	r15, r19
    1222:	04 0b       	sbc	r16, r20
    1224:	15 0b       	sbc	r17, r21
    1226:	02 c0       	rjmp	.+4      	; 0x122c <__floatsisf+0x68>
    1228:	79 01       	movw	r14, r18
    122a:	8a 01       	movw	r16, r20
    122c:	8e e1       	ldi	r24, 0x1E	; 30
    122e:	c8 2e       	mov	r12, r24
    1230:	d1 2c       	mov	r13, r1
    1232:	dc 82       	std	Y+4, r13	; 0x04
    1234:	cb 82       	std	Y+3, r12	; 0x03
    1236:	ed 82       	std	Y+5, r14	; 0x05
    1238:	fe 82       	std	Y+6, r15	; 0x06
    123a:	0f 83       	std	Y+7, r16	; 0x07
    123c:	18 87       	std	Y+8, r17	; 0x08
    123e:	c8 01       	movw	r24, r16
    1240:	b7 01       	movw	r22, r14
    1242:	0e 94 0d 0a 	call	0x141a	; 0x141a <__clzsi2>
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	18 16       	cp	r1, r24
    124a:	19 06       	cpc	r1, r25
    124c:	84 f4       	brge	.+32     	; 0x126e <__floatsisf+0xaa>
    124e:	08 2e       	mov	r0, r24
    1250:	04 c0       	rjmp	.+8      	; 0x125a <__floatsisf+0x96>
    1252:	ee 0c       	add	r14, r14
    1254:	ff 1c       	adc	r15, r15
    1256:	00 1f       	adc	r16, r16
    1258:	11 1f       	adc	r17, r17
    125a:	0a 94       	dec	r0
    125c:	d2 f7       	brpl	.-12     	; 0x1252 <__floatsisf+0x8e>
    125e:	ed 82       	std	Y+5, r14	; 0x05
    1260:	fe 82       	std	Y+6, r15	; 0x06
    1262:	0f 83       	std	Y+7, r16	; 0x07
    1264:	18 87       	std	Y+8, r17	; 0x08
    1266:	c8 1a       	sub	r12, r24
    1268:	d9 0a       	sbc	r13, r25
    126a:	dc 82       	std	Y+4, r13	; 0x04
    126c:	cb 82       	std	Y+3, r12	; 0x03
    126e:	ba 82       	std	Y+2, r11	; 0x02
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__pack_f>
    1278:	28 96       	adiw	r28, 0x08	; 8
    127a:	e9 e0       	ldi	r30, 0x09	; 9
    127c:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__epilogue_restores__+0x12>

00001280 <__fixsfsi>:
    1280:	ac e0       	ldi	r26, 0x0C	; 12
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e6 e4       	ldi	r30, 0x46	; 70
    1286:	f9 e0       	ldi	r31, 0x09	; 9
    1288:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__prologue_saves__+0x20>
    128c:	69 83       	std	Y+1, r22	; 0x01
    128e:	7a 83       	std	Y+2, r23	; 0x02
    1290:	8b 83       	std	Y+3, r24	; 0x03
    1292:	9c 83       	std	Y+4, r25	; 0x04
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	be 01       	movw	r22, r28
    129a:	6b 5f       	subi	r22, 0xFB	; 251
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	0e 94 31 0b 	call	0x1662	; 0x1662 <__unpack_f>
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	82 30       	cpi	r24, 0x02	; 2
    12a6:	61 f1       	breq	.+88     	; 0x1300 <__fixsfsi+0x80>
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	50 f1       	brcs	.+84     	; 0x1300 <__fixsfsi+0x80>
    12ac:	84 30       	cpi	r24, 0x04	; 4
    12ae:	21 f4       	brne	.+8      	; 0x12b8 <__fixsfsi+0x38>
    12b0:	8e 81       	ldd	r24, Y+6	; 0x06
    12b2:	88 23       	and	r24, r24
    12b4:	51 f1       	breq	.+84     	; 0x130a <__fixsfsi+0x8a>
    12b6:	2e c0       	rjmp	.+92     	; 0x1314 <__fixsfsi+0x94>
    12b8:	2f 81       	ldd	r18, Y+7	; 0x07
    12ba:	38 85       	ldd	r19, Y+8	; 0x08
    12bc:	37 fd       	sbrc	r19, 7
    12be:	20 c0       	rjmp	.+64     	; 0x1300 <__fixsfsi+0x80>
    12c0:	6e 81       	ldd	r22, Y+6	; 0x06
    12c2:	2f 31       	cpi	r18, 0x1F	; 31
    12c4:	31 05       	cpc	r19, r1
    12c6:	1c f0       	brlt	.+6      	; 0x12ce <__fixsfsi+0x4e>
    12c8:	66 23       	and	r22, r22
    12ca:	f9 f0       	breq	.+62     	; 0x130a <__fixsfsi+0x8a>
    12cc:	23 c0       	rjmp	.+70     	; 0x1314 <__fixsfsi+0x94>
    12ce:	8e e1       	ldi	r24, 0x1E	; 30
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	82 1b       	sub	r24, r18
    12d4:	93 0b       	sbc	r25, r19
    12d6:	29 85       	ldd	r18, Y+9	; 0x09
    12d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12da:	4b 85       	ldd	r20, Y+11	; 0x0b
    12dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <__fixsfsi+0x68>
    12e0:	56 95       	lsr	r21
    12e2:	47 95       	ror	r20
    12e4:	37 95       	ror	r19
    12e6:	27 95       	ror	r18
    12e8:	8a 95       	dec	r24
    12ea:	d2 f7       	brpl	.-12     	; 0x12e0 <__fixsfsi+0x60>
    12ec:	66 23       	and	r22, r22
    12ee:	b1 f0       	breq	.+44     	; 0x131c <__fixsfsi+0x9c>
    12f0:	50 95       	com	r21
    12f2:	40 95       	com	r20
    12f4:	30 95       	com	r19
    12f6:	21 95       	neg	r18
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	4f 4f       	sbci	r20, 0xFF	; 255
    12fc:	5f 4f       	sbci	r21, 0xFF	; 255
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <__fixsfsi+0x9c>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	09 c0       	rjmp	.+18     	; 0x131c <__fixsfsi+0x9c>
    130a:	2f ef       	ldi	r18, 0xFF	; 255
    130c:	3f ef       	ldi	r19, 0xFF	; 255
    130e:	4f ef       	ldi	r20, 0xFF	; 255
    1310:	5f e7       	ldi	r21, 0x7F	; 127
    1312:	04 c0       	rjmp	.+8      	; 0x131c <__fixsfsi+0x9c>
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e8       	ldi	r21, 0x80	; 128
    131c:	b9 01       	movw	r22, r18
    131e:	ca 01       	movw	r24, r20
    1320:	2c 96       	adiw	r28, 0x0c	; 12
    1322:	e2 e0       	ldi	r30, 0x02	; 2
    1324:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__epilogue_restores__+0x20>

00001328 <__floatunsisf>:
    1328:	a8 e0       	ldi	r26, 0x08	; 8
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ea e9       	ldi	r30, 0x9A	; 154
    132e:	f9 e0       	ldi	r31, 0x09	; 9
    1330:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__prologue_saves__+0x10>
    1334:	7b 01       	movw	r14, r22
    1336:	8c 01       	movw	r16, r24
    1338:	61 15       	cp	r22, r1
    133a:	71 05       	cpc	r23, r1
    133c:	81 05       	cpc	r24, r1
    133e:	91 05       	cpc	r25, r1
    1340:	19 f4       	brne	.+6      	; 0x1348 <__floatunsisf+0x20>
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	60 c0       	rjmp	.+192    	; 0x1408 <__floatunsisf+0xe0>
    1348:	83 e0       	ldi	r24, 0x03	; 3
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	8e e1       	ldi	r24, 0x1E	; 30
    134e:	c8 2e       	mov	r12, r24
    1350:	d1 2c       	mov	r13, r1
    1352:	dc 82       	std	Y+4, r13	; 0x04
    1354:	cb 82       	std	Y+3, r12	; 0x03
    1356:	ed 82       	std	Y+5, r14	; 0x05
    1358:	fe 82       	std	Y+6, r15	; 0x06
    135a:	0f 83       	std	Y+7, r16	; 0x07
    135c:	18 87       	std	Y+8, r17	; 0x08
    135e:	c8 01       	movw	r24, r16
    1360:	b7 01       	movw	r22, r14
    1362:	0e 94 0d 0a 	call	0x141a	; 0x141a <__clzsi2>
    1366:	fc 01       	movw	r30, r24
    1368:	31 97       	sbiw	r30, 0x01	; 1
    136a:	f7 ff       	sbrs	r31, 7
    136c:	3b c0       	rjmp	.+118    	; 0x13e4 <__floatunsisf+0xbc>
    136e:	22 27       	eor	r18, r18
    1370:	33 27       	eor	r19, r19
    1372:	2e 1b       	sub	r18, r30
    1374:	3f 0b       	sbc	r19, r31
    1376:	57 01       	movw	r10, r14
    1378:	68 01       	movw	r12, r16
    137a:	02 2e       	mov	r0, r18
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <__floatunsisf+0x5e>
    137e:	d6 94       	lsr	r13
    1380:	c7 94       	ror	r12
    1382:	b7 94       	ror	r11
    1384:	a7 94       	ror	r10
    1386:	0a 94       	dec	r0
    1388:	d2 f7       	brpl	.-12     	; 0x137e <__floatunsisf+0x56>
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a0 e0       	ldi	r26, 0x00	; 0
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <__floatunsisf+0x7c>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	aa 1f       	adc	r26, r26
    13a2:	bb 1f       	adc	r27, r27
    13a4:	2a 95       	dec	r18
    13a6:	d2 f7       	brpl	.-12     	; 0x139c <__floatunsisf+0x74>
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	a1 09       	sbc	r26, r1
    13ac:	b1 09       	sbc	r27, r1
    13ae:	8e 21       	and	r24, r14
    13b0:	9f 21       	and	r25, r15
    13b2:	a0 23       	and	r26, r16
    13b4:	b1 23       	and	r27, r17
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	a1 05       	cpc	r26, r1
    13ba:	b1 05       	cpc	r27, r1
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <__floatunsisf+0x9e>
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	4a 29       	or	r20, r10
    13c8:	5b 29       	or	r21, r11
    13ca:	6c 29       	or	r22, r12
    13cc:	7d 29       	or	r23, r13
    13ce:	4d 83       	std	Y+5, r20	; 0x05
    13d0:	5e 83       	std	Y+6, r21	; 0x06
    13d2:	6f 83       	std	Y+7, r22	; 0x07
    13d4:	78 87       	std	Y+8, r23	; 0x08
    13d6:	8e e1       	ldi	r24, 0x1E	; 30
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	8e 1b       	sub	r24, r30
    13dc:	9f 0b       	sbc	r25, r31
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	12 c0       	rjmp	.+36     	; 0x1408 <__floatunsisf+0xe0>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	81 f0       	breq	.+32     	; 0x1408 <__floatunsisf+0xe0>
    13e8:	0e 2e       	mov	r0, r30
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <__floatunsisf+0xcc>
    13ec:	ee 0c       	add	r14, r14
    13ee:	ff 1c       	adc	r15, r15
    13f0:	00 1f       	adc	r16, r16
    13f2:	11 1f       	adc	r17, r17
    13f4:	0a 94       	dec	r0
    13f6:	d2 f7       	brpl	.-12     	; 0x13ec <__floatunsisf+0xc4>
    13f8:	ed 82       	std	Y+5, r14	; 0x05
    13fa:	fe 82       	std	Y+6, r15	; 0x06
    13fc:	0f 83       	std	Y+7, r16	; 0x07
    13fe:	18 87       	std	Y+8, r17	; 0x08
    1400:	ce 1a       	sub	r12, r30
    1402:	df 0a       	sbc	r13, r31
    1404:	dc 82       	std	Y+4, r13	; 0x04
    1406:	cb 82       	std	Y+3, r12	; 0x03
    1408:	1a 82       	std	Y+2, r1	; 0x02
    140a:	ce 01       	movw	r24, r28
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__pack_f>
    1412:	28 96       	adiw	r28, 0x08	; 8
    1414:	ea e0       	ldi	r30, 0x0A	; 10
    1416:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__epilogue_restores__+0x10>

0000141a <__clzsi2>:
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	7b 01       	movw	r14, r22
    1424:	8c 01       	movw	r16, r24
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	e8 16       	cp	r14, r24
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	f8 06       	cpc	r15, r24
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	08 07       	cpc	r16, r24
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	18 07       	cpc	r17, r24
    1436:	88 f4       	brcc	.+34     	; 0x145a <__clzsi2+0x40>
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	e8 16       	cp	r14, r24
    143c:	f1 04       	cpc	r15, r1
    143e:	01 05       	cpc	r16, r1
    1440:	11 05       	cpc	r17, r1
    1442:	31 f0       	breq	.+12     	; 0x1450 <__clzsi2+0x36>
    1444:	28 f0       	brcs	.+10     	; 0x1450 <__clzsi2+0x36>
    1446:	88 e0       	ldi	r24, 0x08	; 8
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a0 e0       	ldi	r26, 0x00	; 0
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	17 c0       	rjmp	.+46     	; 0x147e <__clzsi2+0x64>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	12 c0       	rjmp	.+36     	; 0x147e <__clzsi2+0x64>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	e8 16       	cp	r14, r24
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	f8 06       	cpc	r15, r24
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	08 07       	cpc	r16, r24
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	18 07       	cpc	r17, r24
    146a:	28 f0       	brcs	.+10     	; 0x1476 <__clzsi2+0x5c>
    146c:	88 e1       	ldi	r24, 0x18	; 24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	04 c0       	rjmp	.+8      	; 0x147e <__clzsi2+0x64>
    1476:	80 e1       	ldi	r24, 0x10	; 16
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e0       	ldi	r26, 0x00	; 0
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	20 e2       	ldi	r18, 0x20	; 32
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	28 1b       	sub	r18, r24
    1488:	39 0b       	sbc	r19, r25
    148a:	4a 0b       	sbc	r20, r26
    148c:	5b 0b       	sbc	r21, r27
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <__clzsi2+0x7e>
    1490:	16 95       	lsr	r17
    1492:	07 95       	ror	r16
    1494:	f7 94       	ror	r15
    1496:	e7 94       	ror	r14
    1498:	8a 95       	dec	r24
    149a:	d2 f7       	brpl	.-12     	; 0x1490 <__clzsi2+0x76>
    149c:	f7 01       	movw	r30, r14
    149e:	e8 5f       	subi	r30, 0xF8	; 248
    14a0:	fe 4f       	sbci	r31, 0xFE	; 254
    14a2:	80 81       	ld	r24, Z
    14a4:	28 1b       	sub	r18, r24
    14a6:	31 09       	sbc	r19, r1
    14a8:	41 09       	sbc	r20, r1
    14aa:	51 09       	sbc	r21, r1
    14ac:	c9 01       	movw	r24, r18
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	08 95       	ret

000014b8 <__pack_f>:
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	fc 01       	movw	r30, r24
    14c4:	e4 80       	ldd	r14, Z+4	; 0x04
    14c6:	f5 80       	ldd	r15, Z+5	; 0x05
    14c8:	06 81       	ldd	r16, Z+6	; 0x06
    14ca:	17 81       	ldd	r17, Z+7	; 0x07
    14cc:	d1 80       	ldd	r13, Z+1	; 0x01
    14ce:	80 81       	ld	r24, Z
    14d0:	82 30       	cpi	r24, 0x02	; 2
    14d2:	48 f4       	brcc	.+18     	; 0x14e6 <__pack_f+0x2e>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e1       	ldi	r26, 0x10	; 16
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e8 2a       	or	r14, r24
    14de:	f9 2a       	or	r15, r25
    14e0:	0a 2b       	or	r16, r26
    14e2:	1b 2b       	or	r17, r27
    14e4:	a5 c0       	rjmp	.+330    	; 0x1630 <__pack_f+0x178>
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	09 f4       	brne	.+2      	; 0x14ec <__pack_f+0x34>
    14ea:	9f c0       	rjmp	.+318    	; 0x162a <__pack_f+0x172>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	21 f4       	brne	.+8      	; 0x14f8 <__pack_f+0x40>
    14f0:	ee 24       	eor	r14, r14
    14f2:	ff 24       	eor	r15, r15
    14f4:	87 01       	movw	r16, r14
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <__pack_f+0x4a>
    14f8:	e1 14       	cp	r14, r1
    14fa:	f1 04       	cpc	r15, r1
    14fc:	01 05       	cpc	r16, r1
    14fe:	11 05       	cpc	r17, r1
    1500:	19 f4       	brne	.+6      	; 0x1508 <__pack_f+0x50>
    1502:	e0 e0       	ldi	r30, 0x00	; 0
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	96 c0       	rjmp	.+300    	; 0x1634 <__pack_f+0x17c>
    1508:	62 81       	ldd	r22, Z+2	; 0x02
    150a:	73 81       	ldd	r23, Z+3	; 0x03
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	62 38       	cpi	r22, 0x82	; 130
    1510:	79 07       	cpc	r23, r25
    1512:	0c f0       	brlt	.+2      	; 0x1516 <__pack_f+0x5e>
    1514:	5b c0       	rjmp	.+182    	; 0x15cc <__pack_f+0x114>
    1516:	22 e8       	ldi	r18, 0x82	; 130
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	26 1b       	sub	r18, r22
    151c:	37 0b       	sbc	r19, r23
    151e:	2a 31       	cpi	r18, 0x1A	; 26
    1520:	31 05       	cpc	r19, r1
    1522:	2c f0       	brlt	.+10     	; 0x152e <__pack_f+0x76>
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	2a c0       	rjmp	.+84     	; 0x1582 <__pack_f+0xca>
    152e:	b8 01       	movw	r22, r16
    1530:	a7 01       	movw	r20, r14
    1532:	02 2e       	mov	r0, r18
    1534:	04 c0       	rjmp	.+8      	; 0x153e <__pack_f+0x86>
    1536:	76 95       	lsr	r23
    1538:	67 95       	ror	r22
    153a:	57 95       	ror	r21
    153c:	47 95       	ror	r20
    153e:	0a 94       	dec	r0
    1540:	d2 f7       	brpl	.-12     	; 0x1536 <__pack_f+0x7e>
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <__pack_f+0x9c>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	aa 1f       	adc	r26, r26
    1552:	bb 1f       	adc	r27, r27
    1554:	2a 95       	dec	r18
    1556:	d2 f7       	brpl	.-12     	; 0x154c <__pack_f+0x94>
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	a1 09       	sbc	r26, r1
    155c:	b1 09       	sbc	r27, r1
    155e:	8e 21       	and	r24, r14
    1560:	9f 21       	and	r25, r15
    1562:	a0 23       	and	r26, r16
    1564:	b1 23       	and	r27, r17
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	a1 05       	cpc	r26, r1
    156a:	b1 05       	cpc	r27, r1
    156c:	21 f0       	breq	.+8      	; 0x1576 <__pack_f+0xbe>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	9a 01       	movw	r18, r20
    1578:	ab 01       	movw	r20, r22
    157a:	28 2b       	or	r18, r24
    157c:	39 2b       	or	r19, r25
    157e:	4a 2b       	or	r20, r26
    1580:	5b 2b       	or	r21, r27
    1582:	da 01       	movw	r26, r20
    1584:	c9 01       	movw	r24, r18
    1586:	8f 77       	andi	r24, 0x7F	; 127
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	a0 70       	andi	r26, 0x00	; 0
    158c:	b0 70       	andi	r27, 0x00	; 0
    158e:	80 34       	cpi	r24, 0x40	; 64
    1590:	91 05       	cpc	r25, r1
    1592:	a1 05       	cpc	r26, r1
    1594:	b1 05       	cpc	r27, r1
    1596:	39 f4       	brne	.+14     	; 0x15a6 <__pack_f+0xee>
    1598:	27 ff       	sbrs	r18, 7
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <__pack_f+0xf6>
    159c:	20 5c       	subi	r18, 0xC0	; 192
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	4f 4f       	sbci	r20, 0xFF	; 255
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	04 c0       	rjmp	.+8      	; 0x15ae <__pack_f+0xf6>
    15a6:	21 5c       	subi	r18, 0xC1	; 193
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	4f 4f       	sbci	r20, 0xFF	; 255
    15ac:	5f 4f       	sbci	r21, 0xFF	; 255
    15ae:	e0 e0       	ldi	r30, 0x00	; 0
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	20 30       	cpi	r18, 0x00	; 0
    15b4:	a0 e0       	ldi	r26, 0x00	; 0
    15b6:	3a 07       	cpc	r19, r26
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	4a 07       	cpc	r20, r26
    15bc:	a0 e4       	ldi	r26, 0x40	; 64
    15be:	5a 07       	cpc	r21, r26
    15c0:	10 f0       	brcs	.+4      	; 0x15c6 <__pack_f+0x10e>
    15c2:	e1 e0       	ldi	r30, 0x01	; 1
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	79 01       	movw	r14, r18
    15c8:	8a 01       	movw	r16, r20
    15ca:	27 c0       	rjmp	.+78     	; 0x161a <__pack_f+0x162>
    15cc:	60 38       	cpi	r22, 0x80	; 128
    15ce:	71 05       	cpc	r23, r1
    15d0:	64 f5       	brge	.+88     	; 0x162a <__pack_f+0x172>
    15d2:	fb 01       	movw	r30, r22
    15d4:	e1 58       	subi	r30, 0x81	; 129
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	d8 01       	movw	r26, r16
    15da:	c7 01       	movw	r24, r14
    15dc:	8f 77       	andi	r24, 0x7F	; 127
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	a0 70       	andi	r26, 0x00	; 0
    15e2:	b0 70       	andi	r27, 0x00	; 0
    15e4:	80 34       	cpi	r24, 0x40	; 64
    15e6:	91 05       	cpc	r25, r1
    15e8:	a1 05       	cpc	r26, r1
    15ea:	b1 05       	cpc	r27, r1
    15ec:	39 f4       	brne	.+14     	; 0x15fc <__pack_f+0x144>
    15ee:	e7 fe       	sbrs	r14, 7
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <__pack_f+0x154>
    15f2:	80 e4       	ldi	r24, 0x40	; 64
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 e0       	ldi	r26, 0x00	; 0
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <__pack_f+0x14c>
    15fc:	8f e3       	ldi	r24, 0x3F	; 63
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e8 0e       	add	r14, r24
    1606:	f9 1e       	adc	r15, r25
    1608:	0a 1f       	adc	r16, r26
    160a:	1b 1f       	adc	r17, r27
    160c:	17 ff       	sbrs	r17, 7
    160e:	05 c0       	rjmp	.+10     	; 0x161a <__pack_f+0x162>
    1610:	16 95       	lsr	r17
    1612:	07 95       	ror	r16
    1614:	f7 94       	ror	r15
    1616:	e7 94       	ror	r14
    1618:	31 96       	adiw	r30, 0x01	; 1
    161a:	87 e0       	ldi	r24, 0x07	; 7
    161c:	16 95       	lsr	r17
    161e:	07 95       	ror	r16
    1620:	f7 94       	ror	r15
    1622:	e7 94       	ror	r14
    1624:	8a 95       	dec	r24
    1626:	d1 f7       	brne	.-12     	; 0x161c <__pack_f+0x164>
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <__pack_f+0x17c>
    162a:	ee 24       	eor	r14, r14
    162c:	ff 24       	eor	r15, r15
    162e:	87 01       	movw	r16, r14
    1630:	ef ef       	ldi	r30, 0xFF	; 255
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	6e 2f       	mov	r22, r30
    1636:	67 95       	ror	r22
    1638:	66 27       	eor	r22, r22
    163a:	67 95       	ror	r22
    163c:	90 2f       	mov	r25, r16
    163e:	9f 77       	andi	r25, 0x7F	; 127
    1640:	d7 94       	ror	r13
    1642:	dd 24       	eor	r13, r13
    1644:	d7 94       	ror	r13
    1646:	8e 2f       	mov	r24, r30
    1648:	86 95       	lsr	r24
    164a:	49 2f       	mov	r20, r25
    164c:	46 2b       	or	r20, r22
    164e:	58 2f       	mov	r21, r24
    1650:	5d 29       	or	r21, r13
    1652:	b7 01       	movw	r22, r14
    1654:	ca 01       	movw	r24, r20
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	08 95       	ret

00001662 <__unpack_f>:
    1662:	fc 01       	movw	r30, r24
    1664:	db 01       	movw	r26, r22
    1666:	40 81       	ld	r20, Z
    1668:	51 81       	ldd	r21, Z+1	; 0x01
    166a:	22 81       	ldd	r18, Z+2	; 0x02
    166c:	62 2f       	mov	r22, r18
    166e:	6f 77       	andi	r22, 0x7F	; 127
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	22 1f       	adc	r18, r18
    1674:	22 27       	eor	r18, r18
    1676:	22 1f       	adc	r18, r18
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	89 2f       	mov	r24, r25
    167c:	88 0f       	add	r24, r24
    167e:	82 2b       	or	r24, r18
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	99 1f       	adc	r25, r25
    1686:	99 27       	eor	r25, r25
    1688:	99 1f       	adc	r25, r25
    168a:	11 96       	adiw	r26, 0x01	; 1
    168c:	9c 93       	st	X, r25
    168e:	11 97       	sbiw	r26, 0x01	; 1
    1690:	21 15       	cp	r18, r1
    1692:	31 05       	cpc	r19, r1
    1694:	a9 f5       	brne	.+106    	; 0x1700 <__unpack_f+0x9e>
    1696:	41 15       	cp	r20, r1
    1698:	51 05       	cpc	r21, r1
    169a:	61 05       	cpc	r22, r1
    169c:	71 05       	cpc	r23, r1
    169e:	11 f4       	brne	.+4      	; 0x16a4 <__unpack_f+0x42>
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	37 c0       	rjmp	.+110    	; 0x1712 <__unpack_f+0xb0>
    16a4:	82 e8       	ldi	r24, 0x82	; 130
    16a6:	9f ef       	ldi	r25, 0xFF	; 255
    16a8:	13 96       	adiw	r26, 0x03	; 3
    16aa:	9c 93       	st	X, r25
    16ac:	8e 93       	st	-X, r24
    16ae:	12 97       	sbiw	r26, 0x02	; 2
    16b0:	9a 01       	movw	r18, r20
    16b2:	ab 01       	movw	r20, r22
    16b4:	67 e0       	ldi	r22, 0x07	; 7
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	44 1f       	adc	r20, r20
    16bc:	55 1f       	adc	r21, r21
    16be:	6a 95       	dec	r22
    16c0:	d1 f7       	brne	.-12     	; 0x16b6 <__unpack_f+0x54>
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	8c 93       	st	X, r24
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <__unpack_f+0x80>
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	44 1f       	adc	r20, r20
    16ce:	55 1f       	adc	r21, r21
    16d0:	12 96       	adiw	r26, 0x02	; 2
    16d2:	8d 91       	ld	r24, X+
    16d4:	9c 91       	ld	r25, X
    16d6:	13 97       	sbiw	r26, 0x03	; 3
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	13 96       	adiw	r26, 0x03	; 3
    16dc:	9c 93       	st	X, r25
    16de:	8e 93       	st	-X, r24
    16e0:	12 97       	sbiw	r26, 0x02	; 2
    16e2:	20 30       	cpi	r18, 0x00	; 0
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	38 07       	cpc	r19, r24
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	48 07       	cpc	r20, r24
    16ec:	80 e4       	ldi	r24, 0x40	; 64
    16ee:	58 07       	cpc	r21, r24
    16f0:	58 f3       	brcs	.-42     	; 0x16c8 <__unpack_f+0x66>
    16f2:	14 96       	adiw	r26, 0x04	; 4
    16f4:	2d 93       	st	X+, r18
    16f6:	3d 93       	st	X+, r19
    16f8:	4d 93       	st	X+, r20
    16fa:	5c 93       	st	X, r21
    16fc:	17 97       	sbiw	r26, 0x07	; 7
    16fe:	08 95       	ret
    1700:	2f 3f       	cpi	r18, 0xFF	; 255
    1702:	31 05       	cpc	r19, r1
    1704:	79 f4       	brne	.+30     	; 0x1724 <__unpack_f+0xc2>
    1706:	41 15       	cp	r20, r1
    1708:	51 05       	cpc	r21, r1
    170a:	61 05       	cpc	r22, r1
    170c:	71 05       	cpc	r23, r1
    170e:	19 f4       	brne	.+6      	; 0x1716 <__unpack_f+0xb4>
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	8c 93       	st	X, r24
    1714:	08 95       	ret
    1716:	64 ff       	sbrs	r22, 4
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <__unpack_f+0xbe>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	8c 93       	st	X, r24
    171e:	12 c0       	rjmp	.+36     	; 0x1744 <__unpack_f+0xe2>
    1720:	1c 92       	st	X, r1
    1722:	10 c0       	rjmp	.+32     	; 0x1744 <__unpack_f+0xe2>
    1724:	2f 57       	subi	r18, 0x7F	; 127
    1726:	30 40       	sbci	r19, 0x00	; 0
    1728:	13 96       	adiw	r26, 0x03	; 3
    172a:	3c 93       	st	X, r19
    172c:	2e 93       	st	-X, r18
    172e:	12 97       	sbiw	r26, 0x02	; 2
    1730:	83 e0       	ldi	r24, 0x03	; 3
    1732:	8c 93       	st	X, r24
    1734:	87 e0       	ldi	r24, 0x07	; 7
    1736:	44 0f       	add	r20, r20
    1738:	55 1f       	adc	r21, r21
    173a:	66 1f       	adc	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	8a 95       	dec	r24
    1740:	d1 f7       	brne	.-12     	; 0x1736 <__unpack_f+0xd4>
    1742:	70 64       	ori	r23, 0x40	; 64
    1744:	14 96       	adiw	r26, 0x04	; 4
    1746:	4d 93       	st	X+, r20
    1748:	5d 93       	st	X+, r21
    174a:	6d 93       	st	X+, r22
    174c:	7c 93       	st	X, r23
    174e:	17 97       	sbiw	r26, 0x07	; 7
    1750:	08 95       	ret

00001752 <__fpcmp_parts_f>:
    1752:	1f 93       	push	r17
    1754:	dc 01       	movw	r26, r24
    1756:	fb 01       	movw	r30, r22
    1758:	9c 91       	ld	r25, X
    175a:	92 30       	cpi	r25, 0x02	; 2
    175c:	08 f4       	brcc	.+2      	; 0x1760 <__fpcmp_parts_f+0xe>
    175e:	47 c0       	rjmp	.+142    	; 0x17ee <__fpcmp_parts_f+0x9c>
    1760:	80 81       	ld	r24, Z
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	08 f4       	brcc	.+2      	; 0x1768 <__fpcmp_parts_f+0x16>
    1766:	43 c0       	rjmp	.+134    	; 0x17ee <__fpcmp_parts_f+0x9c>
    1768:	94 30       	cpi	r25, 0x04	; 4
    176a:	51 f4       	brne	.+20     	; 0x1780 <__fpcmp_parts_f+0x2e>
    176c:	11 96       	adiw	r26, 0x01	; 1
    176e:	1c 91       	ld	r17, X
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	99 f5       	brne	.+102    	; 0x17da <__fpcmp_parts_f+0x88>
    1774:	81 81       	ldd	r24, Z+1	; 0x01
    1776:	68 2f       	mov	r22, r24
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	61 1b       	sub	r22, r17
    177c:	71 09       	sbc	r23, r1
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <__fpcmp_parts_f+0xac>
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	21 f0       	breq	.+8      	; 0x178c <__fpcmp_parts_f+0x3a>
    1784:	92 30       	cpi	r25, 0x02	; 2
    1786:	31 f4       	brne	.+12     	; 0x1794 <__fpcmp_parts_f+0x42>
    1788:	82 30       	cpi	r24, 0x02	; 2
    178a:	b9 f1       	breq	.+110    	; 0x17fa <__fpcmp_parts_f+0xa8>
    178c:	81 81       	ldd	r24, Z+1	; 0x01
    178e:	88 23       	and	r24, r24
    1790:	89 f1       	breq	.+98     	; 0x17f4 <__fpcmp_parts_f+0xa2>
    1792:	2d c0       	rjmp	.+90     	; 0x17ee <__fpcmp_parts_f+0x9c>
    1794:	11 96       	adiw	r26, 0x01	; 1
    1796:	1c 91       	ld	r17, X
    1798:	11 97       	sbiw	r26, 0x01	; 1
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	f1 f0       	breq	.+60     	; 0x17da <__fpcmp_parts_f+0x88>
    179e:	81 81       	ldd	r24, Z+1	; 0x01
    17a0:	18 17       	cp	r17, r24
    17a2:	d9 f4       	brne	.+54     	; 0x17da <__fpcmp_parts_f+0x88>
    17a4:	12 96       	adiw	r26, 0x02	; 2
    17a6:	2d 91       	ld	r18, X+
    17a8:	3c 91       	ld	r19, X
    17aa:	13 97       	sbiw	r26, 0x03	; 3
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	82 17       	cp	r24, r18
    17b2:	93 07       	cpc	r25, r19
    17b4:	94 f0       	brlt	.+36     	; 0x17da <__fpcmp_parts_f+0x88>
    17b6:	28 17       	cp	r18, r24
    17b8:	39 07       	cpc	r19, r25
    17ba:	bc f0       	brlt	.+46     	; 0x17ea <__fpcmp_parts_f+0x98>
    17bc:	14 96       	adiw	r26, 0x04	; 4
    17be:	8d 91       	ld	r24, X+
    17c0:	9d 91       	ld	r25, X+
    17c2:	0d 90       	ld	r0, X+
    17c4:	bc 91       	ld	r27, X
    17c6:	a0 2d       	mov	r26, r0
    17c8:	24 81       	ldd	r18, Z+4	; 0x04
    17ca:	35 81       	ldd	r19, Z+5	; 0x05
    17cc:	46 81       	ldd	r20, Z+6	; 0x06
    17ce:	57 81       	ldd	r21, Z+7	; 0x07
    17d0:	28 17       	cp	r18, r24
    17d2:	39 07       	cpc	r19, r25
    17d4:	4a 07       	cpc	r20, r26
    17d6:	5b 07       	cpc	r21, r27
    17d8:	18 f4       	brcc	.+6      	; 0x17e0 <__fpcmp_parts_f+0x8e>
    17da:	11 23       	and	r17, r17
    17dc:	41 f0       	breq	.+16     	; 0x17ee <__fpcmp_parts_f+0x9c>
    17de:	0a c0       	rjmp	.+20     	; 0x17f4 <__fpcmp_parts_f+0xa2>
    17e0:	82 17       	cp	r24, r18
    17e2:	93 07       	cpc	r25, r19
    17e4:	a4 07       	cpc	r26, r20
    17e6:	b5 07       	cpc	r27, r21
    17e8:	40 f4       	brcc	.+16     	; 0x17fa <__fpcmp_parts_f+0xa8>
    17ea:	11 23       	and	r17, r17
    17ec:	19 f0       	breq	.+6      	; 0x17f4 <__fpcmp_parts_f+0xa2>
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <__fpcmp_parts_f+0xac>
    17f4:	6f ef       	ldi	r22, 0xFF	; 255
    17f6:	7f ef       	ldi	r23, 0xFF	; 255
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <__fpcmp_parts_f+0xac>
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	cb 01       	movw	r24, r22
    1800:	1f 91       	pop	r17
    1802:	08 95       	ret

00001804 <__udivmodhi4>:
    1804:	aa 1b       	sub	r26, r26
    1806:	bb 1b       	sub	r27, r27
    1808:	51 e1       	ldi	r21, 0x11	; 17
    180a:	07 c0       	rjmp	.+14     	; 0x181a <__udivmodhi4_ep>

0000180c <__udivmodhi4_loop>:
    180c:	aa 1f       	adc	r26, r26
    180e:	bb 1f       	adc	r27, r27
    1810:	a6 17       	cp	r26, r22
    1812:	b7 07       	cpc	r27, r23
    1814:	10 f0       	brcs	.+4      	; 0x181a <__udivmodhi4_ep>
    1816:	a6 1b       	sub	r26, r22
    1818:	b7 0b       	sbc	r27, r23

0000181a <__udivmodhi4_ep>:
    181a:	88 1f       	adc	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	5a 95       	dec	r21
    1820:	a9 f7       	brne	.-22     	; 0x180c <__udivmodhi4_loop>
    1822:	80 95       	com	r24
    1824:	90 95       	com	r25
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	08 95       	ret

0000182c <__divmodhi4>:
    182c:	97 fb       	bst	r25, 7
    182e:	09 2e       	mov	r0, r25
    1830:	07 26       	eor	r0, r23
    1832:	0a d0       	rcall	.+20     	; 0x1848 <__divmodhi4_neg1>
    1834:	77 fd       	sbrc	r23, 7
    1836:	04 d0       	rcall	.+8      	; 0x1840 <__divmodhi4_neg2>
    1838:	e5 df       	rcall	.-54     	; 0x1804 <__udivmodhi4>
    183a:	06 d0       	rcall	.+12     	; 0x1848 <__divmodhi4_neg1>
    183c:	00 20       	and	r0, r0
    183e:	1a f4       	brpl	.+6      	; 0x1846 <__divmodhi4_exit>

00001840 <__divmodhi4_neg2>:
    1840:	70 95       	com	r23
    1842:	61 95       	neg	r22
    1844:	7f 4f       	sbci	r23, 0xFF	; 255

00001846 <__divmodhi4_exit>:
    1846:	08 95       	ret

00001848 <__divmodhi4_neg1>:
    1848:	f6 f7       	brtc	.-4      	; 0x1846 <__divmodhi4_exit>
    184a:	90 95       	com	r25
    184c:	81 95       	neg	r24
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	08 95       	ret

00001852 <__prologue_saves__>:
    1852:	2f 92       	push	r2
    1854:	3f 92       	push	r3
    1856:	4f 92       	push	r4
    1858:	5f 92       	push	r5
    185a:	6f 92       	push	r6
    185c:	7f 92       	push	r7
    185e:	8f 92       	push	r8
    1860:	9f 92       	push	r9
    1862:	af 92       	push	r10
    1864:	bf 92       	push	r11
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	ca 1b       	sub	r28, r26
    187c:	db 0b       	sbc	r29, r27
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	09 94       	ijmp

0000188a <__epilogue_restores__>:
    188a:	2a 88       	ldd	r2, Y+18	; 0x12
    188c:	39 88       	ldd	r3, Y+17	; 0x11
    188e:	48 88       	ldd	r4, Y+16	; 0x10
    1890:	5f 84       	ldd	r5, Y+15	; 0x0f
    1892:	6e 84       	ldd	r6, Y+14	; 0x0e
    1894:	7d 84       	ldd	r7, Y+13	; 0x0d
    1896:	8c 84       	ldd	r8, Y+12	; 0x0c
    1898:	9b 84       	ldd	r9, Y+11	; 0x0b
    189a:	aa 84       	ldd	r10, Y+10	; 0x0a
    189c:	b9 84       	ldd	r11, Y+9	; 0x09
    189e:	c8 84       	ldd	r12, Y+8	; 0x08
    18a0:	df 80       	ldd	r13, Y+7	; 0x07
    18a2:	ee 80       	ldd	r14, Y+6	; 0x06
    18a4:	fd 80       	ldd	r15, Y+5	; 0x05
    18a6:	0c 81       	ldd	r16, Y+4	; 0x04
    18a8:	1b 81       	ldd	r17, Y+3	; 0x03
    18aa:	aa 81       	ldd	r26, Y+2	; 0x02
    18ac:	b9 81       	ldd	r27, Y+1	; 0x01
    18ae:	ce 0f       	add	r28, r30
    18b0:	d1 1d       	adc	r29, r1
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	ed 01       	movw	r28, r26
    18be:	08 95       	ret

000018c0 <_exit>:
    18c0:	f8 94       	cli

000018c2 <__stop_program>:
    18c2:	ff cf       	rjmp	.-2      	; 0x18c2 <__stop_program>
